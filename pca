#!/bin/bash

function license()
{
	cat <<-EOL
	##############################################################################
	#                                                                            #
	#   pca - An OpenSSL based "perfect" CA setup and management tool            #
	#   Copyright (C) 2018 - 2020 Oliver Welter <oliver@welter.rocks>            #
	#                                                                            #
	#   This program is free software: you can redistribute it and/or modify     #
	#   it under the terms of the GNU General Public License as published by     #
	#   the Free Software Foundation, either version 3 of the License, or        #
	#   (at your option) any later version.                                      #
	#                                                                            #
	#   This program is distributed in the hope that it will be useful,          #
	#   but WITHOUT ANY WARRANTY; without even the implied warranty of           #
	#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
	#   GNU General Public License for more details.                             #
	#                                                                            #
	#   You should have received a copy of the GNU General Public License        #
	#   along with this program.  If not, see <https://www.gnu.org/licenses/>.   #
	#                                                                            #
	##############################################################################
	#                                                                            #
	#   Usage: pca --help                                                        #
	#                                                                            #
	##############################################################################
	EOL
}

##########################
# BASIC CONFIGRATION

PCA_BACKUP_PATH="/var/backups/pki"
PCA_BACKUP_KEY="ADI2E2FeyCbxQdV5MqACjR9mPv0qw1Cg"
PCA_BACKUP_ROTATE_DAYS="7"

PCA_BASE_PATH="/etc/pki"
PCA_BASE_LOGFILE="syslog"
PCA_BASE_NAME="Perfect-CA"
PCA_BASE_OCSP_HOSTNAME="ocsp.my.domain"
PCA_BASE_OCSP_URL="http://ocsp.my.domain"
PCA_BASE_PKI_URL="http://pki.my.domain"
PCA_BASE_TRUSTLIST_URL="http://pki.my.domain/trustList.etl"
PCA_BASE_CPS_URL="http://pki.my.domain/CPS"
PCA_BASE_RANDOM_EV_OID="2.23.140.1.8.66141.2"
PCA_BASE_CPS_POLICY_OID="1.2.276.2.1.3.1.3.3.7"
PCA_BASE_ETL_POLICY_OID="2.16.840.1.113730.1.900"
PCA_BASE_XMPPDOMAIN="my.domain"
PCA_BASE_XMPPHOST="xmpp.my.domain"

PCA_DN_COUNTRYNAME="DE"
PCA_DN_STATEORPROVINCENAME="Hessen"
PCA_DN_LOCALITYNAME="Musterstadt"
PCA_DN_STREETADDRESS="Musterstrasse 123"
PCA_DN_POSTALCODE="12345"
PCA_DN_OWNER="Oliver Welter"
PCA_DN_ORGANIZATIONNAME="Musterfirma"
PCA_DN_BUSINESSCATEGORY="Private"

PCA_ROOTCA_BITS="2048"
PCA_ROOTCA_MD="sha256"
PCA_ROOTCA_VALID_DAYS="7665"
PCA_ROOTCA_CRL_DAYS="365"
PCA_ROOTCA_ORG_UNIT_NAME="$PCA_BASE_NAME Root Certificate Authority"
PCA_ROOTCA_OCSP_PORT="8880"

PCA_MASTERCA_BITS="2048"
PCA_MASTERCA_MD="sha256"
PCA_MASTERCA_VALID_DAYS="3650"
PCA_MASTERCA_CRL_DAYS="180"
PCA_MASTERCA_ORG_UNIT_NAME="$PCA_BASE_NAME Master Certificate Authority"
PCA_MASTERCA_OCSP_PORT="8881"

PCA_NETWORKCA_BITS="2048"
PCA_NETWORKCA_MD="sha256"
PCA_NETWORKCA_VALID_DAYS="3650"
PCA_NETWORKCA_CRL_DAYS="180"
PCA_NETWORKCA_ORG_UNIT_NAME="$PCA_BASE_NAME Network Certificate Authority"
PCA_NETWORKCA_OCSP_PORT="8882"

PCA_COMPONENTCA_BITS="2048"
PCA_COMPONENTCA_MD="sha256"
PCA_COMPONENTCA_VALID_DAYS="3650"
PCA_COMPONENTCA_CRL_DAYS="180"
PCA_COMPONENTCA_ORG_UNIT_NAME="$PCA_BASE_NAME Component Certificate Authority"
PCA_COMPONENTCA_OCSP_PORT="8883"

PCA_IDENTITYCA_BITS="2048"
PCA_IDENTITYCA_MD="sha256"
PCA_IDENTITYCA_VALID_DAYS="3650"
PCA_IDENTITYCA_CRL_DAYS="180"
PCA_IDENTITYCA_ORG_UNIT_NAME="$PCA_BASE_NAME Identity Certificate Authority"
PCA_IDENTITYCA_OCSP_PORT="8884"

PCA_OCSPSIGN_ORG_UNIT_NAME="$PCA_BASE_NAME Online Responder"
PCA_OCSPSIGN_BITS="2048"
PCA_OCSPSIGN_MD="sha1"

PCA_TIMESTAMP_BITS="2048"
PCA_TIMESTAMP_MD="sha1"

PCA_ENCRYPTION_BITS="4096"
PCA_ENCRYPTION_MD="sha256"

PCA_SERVER_BITS="4096"
PCA_SERVER_MD="sha256"
PCA_SERVER_SAN_DNS="welter.rocks"

PCA_EV_BITS="4096"
PCA_EV_MD="sha256"
PCA_EV_SAN_DNS="welter.rocks"

PCA_CLIENT_BITS="4096"
PCA_CLIENT_MD="sha256"

PCA_IDENTITY_BITS="4096"
PCA_IDENTITY_MD="sha256"

PCA_SMIME_BITS="4096"
PCA_SMIME_MD="sha256"

PCA_WINDOWS_BITS="4096"
PCA_WINDOWS_MD="sha256"

PCA_GRACEDAYS="14"

PCA_GNUPG_ROOTSTORE_OWNER_NAME="Root Store"
PCA_GNUPG_ROOTSTORE_OWNER_EMAIL="root-store@welter.rocks"
PCA_GNUPG_MASTERSTORE_OWNER_NAME="Master Store"
PCA_GNUPG_MASTERSTORE_OWNER_EMAIL="master-store@welter.rocks"
PCA_GNUPG_NETWORKSTORE_OWNER_NAME="Network Store"
PCA_GNUPG_NETWORKSTORE_OWNER_EMAIL="network-store@welter.rocks"
PCA_GNUPG_IDENTITYSTORE_OWNER_NAME="Identity Store"
PCA_GNUPG_IDENTITYSTORE_OWNER_EMAIL="identity-store@welter.rocks"
PCA_GNUPG_COMPONENTSTORE_OWNER_NAME="Component Store"
PCA_GNUPG_COMPONENTSTORE_OWNER_EMAIL="component-store@welter.rocks"

PCA_GNUPG_MASTERKEY_KEY_LIFETIME="5y"
PCA_GNUPG_MASTERKEY_CERT_ALGO="rsa4096"
PCA_GNUPG_MASTERKEY_SIGN_ALGO="rsa4096"
PCA_GNUPG_MASTERKEY_ENCRYPT_ALGO="rsa4096"
PCA_GNUPG_MASTERKEY_AUTHENTICATE_ALGO="rsa4096"

PCA_GNUPG_PERSONAL_CIPHER_PREFS="AES256"
PCA_GNUPG_PERSONAL_DIGEST_PREFS="SHA512"
PCA_GNUPG_DEFAULT_PREFS_LIST="SHA512 SHA384 SHA256 RIPEMD160 AES256 TWOFISH BLOWFISH ZLIB BZIP2 ZIP Uncompressed"

PCA_GNUPG_CIPHER_ALGO="AES256"
PCA_GNUPG_DIGEST_ALGO="SHA512"

PCA_GNUPG_CERT_DIGEST_ALGO="SHA512"
PCA_GNUPG_COMPRESS_ALGO="ZLIB"

PCA_GNUPG_DISABLE_CIPHER_ALGO="3DES"
PCA_GNUPG_WEAK_DIGEST="SHA1"

PCA_GNUPG_S2K_CIPHER_ALGO="AES256"
PCA_GNUPG_S2K_DIGEST_ALGO="SHA512"
PCA_GNUPG_S2K_MODE="3"
PCA_GNUPG_S2K_COUNT="65011712"

PCA_SSL_CERTS="/etc/ssl/certs"
PCA_SSL_CA="/etc/ssl/ca"
PCA_OPENSSL="/usr/bin/openssl"
PCA_C_REHASH="/usr/bin/c_rehash"
PCA_TAR="/usr/bin/tar"
PCA_AWK="/usr/bin/awk"
PCA_GREP="/usr/bin/grep"
PCA_MD5SUM="/usr/bin/md5sum"
PCA_MKTEMP="/usr/bin/mktemp"
PCA_REALPATH="/usr/bin/realpath"
PCA_GIT="/usr/bin/git"
PCA_LOGGER="/usr/bin/logger"
PCA_GNUPG="/usr/bin/gpg"
PCA_GNUPG2="/usr/bin/gpg2"
PCA_GNUPG_CONNECT_AGENT="/usr/bin/gpg-connect-agent"

PCA_LIBGCRYPT_EXPLICIT_ALLOW=""
PCA_GPG_EXPLICIT_ALLOW=""
PCA_OPENSSL_EXPLICIT_ALLOW=""

[ -f "$PCA_BASE_PATH/pcarc" ] && . $PCA_BASE_PATH/pcarc
[ -f "~/.pcarc" ] && . ~/.pcarc

PCA_GNUPG_BASE_PATH="$PCA_BASE_PATH/pgp"

# END BASIC CONFIGURATION
##########################

##########################
# LOG FUNCTION

function log()
{
	[ "$PCA_LOGGER" = "" ] && return 1
	
	if [ "$PCA_BASE_LOGFILE" = "syslog" ]; then
		echo "$*" | $PCA_LOGGER --id=$$ -t "Perfect-CA" >/dev/null 2>&1
	elif [ "$PCA_BASE_LOGFILE" != "" ]; then
		logpath=`dirname "$PCA_BASE_LOGFILE"`
		[ -d "$logpath" ] || mkdir -p "$logpath" >/dev/null 2>&1
		[ -f "$PCA_BASE_LOGFILE" ] || touch "$PCA_BASE_LOGFILE" >/dev/null 2>&1 && chmod 640 "$PCA_BASE_LOGFILE" >/dev/null 2>&1
		echo "$*" | $PCA_LOGGER --id=$$ -f "$PCA_BASE_LOGFILE" >/dev/null 2>&1
	fi
	
	return 0
}

# END LOG FUNCTION
##########################

##########################
# ECHOLOG FUNCTION

function echolog()
{
	echo -e "$1"
	log "$2"
}

# END ECHOLOG FUNCTION
##########################

##########################
# ERROR FUNCTION

FAILED="[0;1;31;91mFAILED[0m"
OK="[0;1;32;92mOK[0m"

function error()
{
	echo -e "[0;1;31;91mERROR:[0m [0;1;32;93m$2[0m"
	log "ERROR: $2"
	exit $1
}

# END ERROR FUNCTION
##########################

##########################
# SANITY CHECKS

[ -x "$PCA_OPENSSL" ] || PCA_OPENSSL=`which openssl 2>/dev/null`
[ -x "$PCA_OPENSSL" ] || error 1 "Missing OpenSSL"

[ -x "$PCA_C_REHASH" ] || PCA_C_REHASH=`which c_rehash 2>/dev/null`
[ -x "$PCA_C_REHASH" ] || error 1 "Missing c_rehash"

[ -x "$PCA_GNUPG2" ] || PCA_GNUPG2=`which gpg2 2>/dev/null`
[ -x "$PCA_GNUPG2" ] || PCA_GNUPG2=""
[ -x "$PCA_GNUPG2" ] && PCA_GNUPG="$PCA_GNUPG2"

[ -x "$PCA_GNUPG" ] || PCA_GNUPG=`which gpg 2>/dev/null`
[ -x "$PCA_GNUPG" ] || error 1 "Missing GnuPG"

[ -x "$PCA_GNUPG_CONNECT_AGENT" ] || PCA_GNUPG_CONNECT_AGENT=`which gpg-connect-agent 2>/dev/null`
[ -x "$PCA_GNUPG_CONNECT_AGENT" ] || error 1 "Missing GnuPG connect agent"

[ -x "$PCA_TAR" ] || PCA_TAR=`which tar 2>/dev/null`
[ -x "$PCA_TAR" ] || error 1 "Missing tar"

[ -x "$PCA_AWK" ] || PCA_AWK=`which awk 2>/dev/null`
[ -x "$PCA_AWK" ] || error 1 "Missing awk"

[ -x "$PCA_GREP" ] || PCA_GREP=`which grep 2>/dev/null`
[ -x "$PCA_GREP" ] || error 1 "Missing grep"

[ -x "$PCA_MD5SUM" ] || PCA_MD5SUM=`which md5sum 2>/dev/null`
[ -x "$PCA_MD5SUM" ] || error 1 "Missing md5sum"

[ -x "$PCA_MKTEMP" ] || PCA_MKTEMP=`which mktemp 2>/dev/null`
[ -x "$PCA_MKTEMP" ] || error 1 "Missing mktemp"

[ -x "$PCA_REALPATH" ] || PCA_REALPATH=`which realpath 2>/dev/null`
[ -x "$PCA_REALPATH" ] || error 1 "Missing realpath"

[ -x "$PCA_LOGGER" ] || PCA_LOGGER=`which logger 2>/dev/null`
[ -x "$PCA_LOGGER" ] || PCA_LOGGER=""

[ -d "$PCA_SSL_CERTS" ] || mkdir -p "$PCA_SSL_CERTS" >/dev/null 2>&1
[ -d "$PCA_SSL_CA" ] || mkdir -p "$PCA_SSL_CA" >/dev/null 2>&1
[ -d "$PCA_BACKUP_PATH" ] || mkdir -p "$PCA_BACKUP_PATH" >/dev/null 2>&1

PCA_GITHUB="https://github.com/WelterRocks/perfect-ca"
PCA_PROGNAME="pca"
PCA_VERSION="1.05.15"
PCA_REALCMD=`$PCA_REALPATH $0`

PCA_SSL_VERSION=`$PCA_OPENSSL version | $PCA_AWK '{print $2}'`
PCA_SSL_VERSION_NUMBER=`echo $PCA_SSL_VERSION | $PCA_AWK '{if (match($0, /[a-z]/)) {print substr($1, 0, RSTART - 1)}}'`

PCA_GPG_VERSION=`$PCA_GNUPG --version | $PCA_GREP "^gpg" | $PCA_AWK '{print $3}'`
PCA_LIBGCRYPT_VERSION=`$PCA_GNUPG --version | $PCA_GREP "^libgcrypt" | $PCA_AWK '{print $2}'`
PCA_GPG_V2=`echo $PCA_GPG_VERSION | $PCA_GREP "^2."`

PCA_SKIP_VERSION_CHECK=`echo "$*" | $PCA_AWK '{if (match($0, /\-\-skip\-version\-check/)) {print $1}}'`

PCA_SYSTEM=`uname -romv`
PCA_HASHCODE="unsupported, due to skipped version check"
PCA_CHECKSUM=`$PCA_MD5SUM $PCA_REALCMD | $PCA_AWK '{print $1}'`

LAST_HASHCODE="$PCA_HASHCODE"
LAST_CHECKSUM=`cat "$PCA_BASE_PATH/.checksum" 2>/dev/null`

if [ "$PCA_SKIP_VERSION_CHECK" = "" ]; then
	[ "$PCA_GPG_V2" = "" ] && error 112 "GnuPG is only supported in version 2"

	skip_vcheck_msg="\nYou can disable this check by using --skip-version-check"
	do_hashcode=0
	case $PCA_SSL_VERSION_NUMBER in
		1.0.1)
			if [ "$PCA_OPENSSL_EXPLICIT_ALLOW" != "$PCA_SSL_VERSION_NUMBER" ]; then
				if [ "$PCA_SSL_VERSION" != "1.0.1g" ]; then
					error 99 "Your openssl version $PCA_SSL_VERSION is affected by the heartbleed bug.$skip_vcheck_msg"
				fi
			fi
		;;
		1.0.0)
			do_hashcode=$(($do_hashcode+1))
		;;
		1.0.2|1.1.1)
			case $PCA_SSL_VERSION in				
				1.0.2x|1.1.1i)
					do_hashcode=$(($do_hashcode+1))
				;;
				1.1.1d|1.1.1e|1.1.1f)
					if [ "$PCA_OPENSSL_EXPLICIT_ALLOW" != "$PCA_SSL_VERSION" ]; then
						error 97 "Your openssl version $PCA_SSL_VERSION is affected by DoS vulnerability (see CVE-2020-1967).$skip_vcheck_msg"
					fi			
				;;
				*)
					if [ "$PCA_OPENSSL_EXPLICIT_ALLOW" != "$PCA_SSL_VERSION" ]; then
						error 97 "Your openssl version $PCA_SSL_VERSION is affected by DoS vulnerability (see CVE-2020-1971).$skip_vcheck_msg"
					fi			
				;;
			esac
		;;
		0.9.6|0.9.7|0.9.8)
			if [ "$PCA_OPENSSL_EXPLICIT_ALLOW" != "$PCA_SSL_VERSION_NUMBER" ]; then
				error 97 "Your openssl version $PCA_SSL_VERSION is not working with Perfect-CA.$skip_vcheck_msg"
			fi
		;;
		*)
			if [ "$PCA_OPENSSL_EXPLICIT_ALLOW" != "$PCA_SSL_VERSION_NUMBER" ]; then
				error 98 "Your openssl version $PCA_SSL_VERSION has not been tested with Perfect-CA, yet.$skip_vcheck_msg"
			fi
		;;
	esac
	case $PCA_LIBGCRYPT_VERSION in
		1.9.0)
			if [ "$PCA_LIBGCRYPT_EXPLICIT_ALLOW" != "$PCA_LIBGCRYPT_VERSION" ]; then
				error 100 "Your libgcrypt version $PCA_LIBGCRYPT_VERSION is affected by the heap-based buffer overflow bug.$skip_vcheck_msg"
			fi			
		;;
		1.8.5|1.8.6|1.8.7|1.8.8|1.8.9|1.9.1)
			do_hashcode=$(($do_hashcode+1))
		;;
		1.8.4)
			if [ "$PCA_LIBGCRYPT_EXPLICIT_ALLOW" != "$PCA_LIBGCRYPT_VERSION" ]; then
				error 99 "Your libgcrypt version $PCA_LIBGCRYPT_VERSION is affected by the flush-and-reload side-channel attack bug.$skip_vcheck_msg"
			fi
		;;
		1.8.3)
			if [ "$PCA_LIBGCRYPT_EXPLICIT_ALLOW" != "$PCA_LIBGCRYPT_VERSION" ]; then
				error 98 "Your libgcrypt version $PCA_LIBGCRYPT_VERSION is affected by the memory-cache side-channel attack bug.$skip_vcheck_msg"
			fi
		;;
		1.8.2)
			if [ "$PCA_LIBGCRYPT_EXPLICIT_ALLOW" != "$PCA_LIBGCRYPT_VERSION" ]; then
				error 97 "Your libgcrypt version $PCA_LIBGCRYPT_VERSION improperly encodes plaintext messages.$skip_vcheck_msg"
			fi
		;;
		1.8.1)
			if [ "$PCA_LIBGCRYPT_EXPLICIT_ALLOW" != "$PCA_LIBGCRYPT_VERSION" ]; then
				error 96 "Your libgcrypt version $PCA_LIBGCRYPT_VERSION improperly consider Curve25519 side-channel attacks.$skip_vcheck_msg"
			fi
		;;
		*)
			if [ "$PCA_LIBGCRYPT_EXPLICIT_ALLOW" != "$PCA_LIBGCRYPT_VERSION" ]; then
				error 95 "Your libgcrypt version $PCA_LIBGCRYPT_VERSION should not be used with Perfect-CA.$skip_vcheck_msg"
			fi
		;;
	esac
	case $PCA_GPG_VERSION in
		2.2.4|2.2.5)
			if [ "$PCA_GPG_EXPLICIT_ALLOW" != "$PCA_GPG_VERSION" ]; then
				error 99 "Your gnupg version $PCA_GPG_VERSION does not enforce a configuration in which key certification requires an offline master Certify key, which results in apparently valid certifications that occurred only with access to a signing subkey.$skip_vheck_msg"
			fi
		;;
		2.2.17|2.2.19|2.2.23|2.2.24|2.2.25|2.2.26|2.2.27)
			do_hashcode=$(($do_hashcode+1))
		;;
		2.2.18)
			if [ "$PCA_GPG_EXPLICIT_ALLOW" != "$PCA_GPG_VERSION" ]; then
				error 101 "Your gnupg version $PCA_GPG_VERSION is vulnerable via the forged certificate signature bug.$skip_vcheck_msg"
			fi
		;;
		2.2.21|2.2.22)
			if [ "$PCA_GPG_EXPLICIT_ALLOW" != "$PCA_GPG_VERSION" ]; then
				error 100 "Your gnupg version $PCA_GPG_VERSION has an array overflow, leading to a crash or unspecified impact.$skip_vcheck_msg"
			fi
		;;
		2.2.9|2.2.10|2.2.11|2.2.12|2.2.13|2.2.14|2.2.15|2.2.16)
			if [ "$PCA_GPG_EXPLICIT_ALLOW" != "$PCA_GPG_VERSION" ]; then
				error 98 "Your gnupg version $PCA_GPG_VERSION is vulnerable to DOS attacks on the SKS-Keyserver.$skip_vcheck_msg"
			fi
		;;
		2.2.6|2.2.7|2.2.8)
			if [ "$PCA_GPG_EXPLICIT_ALLOW" != "$PCA_GPG_VERSION" ]; then
				error 97 "Your gnupg version $PCA_GPG_VERSION mishandles the original filename during decryption and verification actions, which allows remote attackers to spoof the output that GnuPG sends on file descriptor 2.$skip_vcheck_msg"
			fi
		;;
		*)
			if [ "$PCA_GPG_EXPLICIT_ALLOW" != "$PCA_GPG_VERSION" ]; then
				error 96 "Your libgcrypt version $PCA_GPG_VERSION should not be used with Perfect-CA.$skip_vcheck_msg"
			fi
		;;
	esac
	
	[ "$do_hashcode" = 3 ] && PCA_HASHCODE=`echo "$PCA_SYSTEM $PCA_VERSION $PCA_SSL_VERSION $PCA_GPG_VERSION $PCA_LIBGCRYPT_VERSION" | $PCA_OPENSSL sha1 | $PCA_AWK '{print $2}'`
	
	LAST_HASHCODE=`cat "$PCA_BASE_PATH/.hashcode" 2>/dev/null`
fi

is_version_check=`echo "$*" | $PCA_GREP "version"`

if [ "$LAST_HASHCODE" != "$PCA_HASHCODE" -a "$is_version_check" = "" ]; then 
	if [ "$PCA_SKIP_VERSION_CHECK" = "" ]; then
		if [ -f "$PCA_BASE_PATH/.hashcode" ]; then
			if [ "$1" = "--force-hashcode-ack" ]; then
				echo "$PCA_HASHCODE" > $PCA_BASE_PATH/.hashcode 2>/dev/null || error 219 "Unable to create/update $PCA_BASE_PATH/.hashcode to new Hashcode. Please check filesystem and permissions."
				echolog "[0;1;32;93mNew System-Hashcode: $PCA_HASHCODE[0m" "Forced hashcode update to $PCA_HASHCODE"
				exit 222				
			else
				error 220 "System change detected. Hashcode differs. Use $PCA_REALCMD --force-hashcode-ack to acknowledge Hashcode changes."
			fi
		else
 			echo "$PCA_HASHCODE" > $PCA_BASE_PATH/.hashcode 2>/dev/null || error 219 "Unable to create/update $PCA_BASE_PATH/.hashcode to new Hashcode. Please check filesystem and permissions."
 			log "Hashcode file created with $PCA_HASHCODE"
		fi
	fi
elif [ "$LAST_CHECKSUM" != "$PCA_CHECKSUM" -a "$is_version_check" = "" ]; then
	if [ -f "$PCA_BASE_PATH/.checksum" ]; then
		if [ "$1" = "--force-checksum-ack" ]; then
			echo "$PCA_CHECKSUM" > $PCA_BASE_PATH/.checksum 2>/dev/null || error 218 "Unable to create/update $PCA_BASE_PATH/.checksum to new File-Checksum. Please check filesystem and permissions."
			echolog "[0;1;32;93mNew Program-Checksum: $PCA_CHECKSUM[0m" "Forced checksum update to $PCA_CHECKSUM"
			exit 222				
		else
			error 221 "File $PCA_REALCMD changed. To acknowledge the new checksum, use $PCA_REALCMD --force-checksum-ack"
		fi
	else
		echo "$PCA_CHECKSUM" > $PCA_BASE_PATH/.checksum 2>/dev/null || error 218 "Unable to create/update $PCA_BASE_PATH/.checksum to new File-Checksum. Please check filesystem and permissions."
		log "Checksum file created with $PCA_CHECKSUM"
	fi
fi

# END SANITY CHECKS
##########################

##########################
# VERSION FUNCTION

function version()
{
	if [ "$1" = "" ];  then
		echo -e "[0;1;32;93mPerfect-CA: $PCA_VERSION\nOpenSSL: $PCA_SSL_VERSION\nGnuPG: $PCA_GPG_VERSION\nLibgcrypt: $PCA_LIBGCRYPT_VERSION\n\nSystem: $PCA_SYSTEM\n\nSystem-Hashcode: $PCA_HASHCODE\nProgram-Checksum: $PCA_CHECKSUM[0m"
		exit 253
	elif [ "$1" = "raw" ]; then
		echo $PCA_VERSION
		exit
	else
		NEW_VERSION="$1"
		
		this_major=`echo $PCA_VERSION | cut -d . -f1`
		this_minor=`echo $PCA_VERSION | cut -d . -f2`
		this_revision=`echo $PCA_VERSION | cut -d . -f3`

		that_major=`echo $NEW_VERSION | cut -d . -f1`
		that_minor=`echo $NEW_VERSION | cut -d . -f2`
		that_revision=`echo $NEW_VERSION | cut -d . -f3`
		
		gt_major=$(($that_major > $this_major))
		gt_minor=$(($that_minor > $this_minor))
		gt_revision=$(($that_revision > $this_revision))

		eq_major=$(($that_major == $this_major))
		eq_minor=$(($that_minor == $this_minor))
		eq_revision=$(($that_revision == $this_revision))
		
		if [ "$eq_major" = "1" ]; then
			if [ "$eq_minor" = "1" ]; then
				if [ "$eq_revision" = "1" ]; then
					echo "[0;1;32;92mVersion is equal to this build.[0m"
					exit
				elif [ "$gt_revision" = "1" ]; then
					echo "[0;1;32;93mRevision version greater than this build.[0m"
					exit 6
				else
					echo "[0;1;32;91mRevision version smaller than this build.[0m"
					exit 5
				fi
			elif [ "$gt_minor" = "1" ]; then
				echo "[0;1;32;93mMinor version greater than this build.[0m"
				exit 4
			else
				echo "[0;1;32;91mMinor version smaller than this build.[0m"
				exit 3	
			fi
		elif [ "$gt_major" = "1" ]; then
			echo "[0;1;32;93mMajor version greater than this build.[0m"
			exit 2
		else
			echo "[0;1;32;91mMajor version smaller than this build.[0m"
			exit 1		
		fi
	fi
}

# END VERSION FUNCTION
##########################

##########################
# CONFIGURATION WRITE

function config_header()
{
	ident=""
	date=`date "+%Y-%m-%d %H:%M:%S"`
	
	case $1 in
		root-ca)
			ident="$PCA_BASE_NAME Root CA configuration"	
		;;
		*)
			ident="$1"
		;;
	esac
	
	cat <<-EOF
	#########################################################
	#                                                       #
	# This file has been generated at by                    #
	#  ____            __           _         ____    _     #
	# |  _ \ ___ _ __ / _| ___  ___| |_      / ___|  / \    #
	# | |_) / _ \ '__| |_ / _ \/ __| __|____| |     / _ \   #
	# |  __/  __/ |  |  _|  __/ (__| ||_____| |___ / ___ \  #
	# |_|   \___|_|  |_|  \___|\___|\__|     \____/_/   \_\ #
	#                                                       #
	# https://github.com/WelterRocks/perfect-ca             #
	#                                                       #
	#########################################################
	# $ident
	# Generated at: $date

	EOF
}

function config_gnupg()
{
	config_header $PCA_GNUPG_BASE_PATH/$1/gnupg.conf
	cat <<-EOF
	# Avoid leakage of information
	no-emit-version
	no-comments
	export-options export-minimal

	# Displays IDs, keys and fingerprints in their long format
	keyid-format 0xlong
	with-fingerprint

	# Displays key validity
	list-options show-uid-validity
	verify-options show-uid-validity

	# Limit the used algorithms
	personal-cipher-preferences $PCA_GNUPG_PERSONAL_CIPHER_PREFS
	personal-digest-preferences $PCA_GNUPG_PERSONAL_DIGEST_PREFS
	default-preference-list $PCA_GNUPG_DEFAULT_PREFS_LIST

	cipher-algo $PCA_GNUPG_CIPHER_ALGO
	digest-algo $PCA_GNUPG_DIGEST_ALGO
	
	cert-digest-algo $PCA_GNUPG_CERT_DIGEST_ALGO
	compress-algo $PCA_GNUPG_COMPRESS_ALGO

	disable-cipher-algo $PCA_GNUPG_DISABLE_CIPHER_ALGO
	weak-digest $PCA_GNUPG_WEAK_DIGEST

	s2k-cipher-algo $PCA_GNUPG_S2K_CIPHER_ALGO
	s2k-digest-algo $PCA_GNUPG_S2K_DIGEST_ALGO
	s2k-mode $PCA_GNUPG_S2K_MODE
	s2k-count $PCA_GNUPG_S2K_COUNT
	EOF
}

function config_ca_section_default()
{
	assurance=""
	deviceass=""
	trustlist=""
	drivecrypt=""
	ocsp_port=""
	
	case $1 in
		root-ca)
			assurance="1"
			deviceass="1"
			trustlist="1"
			ocsp_port="$PCA_ROOTCA_OCSP_PORT"
		;;
		master-ca)
			assurance="1"
			deviceass="1"
			trustlist="1"
			
			ocsp_port="$PCA_MASTERCA_OCSP_PORT"
		;;
		network-ca)
			assurance="1"
			deviceass="1"
			trustlist="1"
			ocsp_port="$PCA_NETWORKCA_OCSP_PORT"
		;;
		component-ca)
			deviceass="1"
			trustlist="1"
			ocsp_port="$PCA_COMPONENTCA_OCSP_PORT"
		;;
		identity-ca)
			assurance="1"
			trustlist="1"
			drivecrypt="1"
			ocsp_port="$PCA_IDENTITYCA_OCSP_PORT"
		;;
		*)
			error 11 "Unkown CA for default section"
		;;
	esac
	
	echo "[ default ]"
	
	[ "$1" = "component-ca" ] && echo "SAN                     = DNS:$PCA_SERVER_SAN_DNS"
	
	cat <<-EOF
	ca                      = $1
	dir                     = $PCA_BASE_PATH
	base_url                = $PCA_BASE_PKI_URL
	ocsp_url		= $PCA_BASE_OCSP_URL:$ocsp_port
	aia_url                 = \$base_url/\$ca.crt
	crl_url                 = \$base_url/\$ca.crl
	name_opt                = multiline,-esc_msb,utf8
	openssl_conf            = openssl_init

	[ openssl_init ]
	oid_section             = include_oids
	
	[ include_oids ]
	perfectCAExtenVal       = $PCA_BASE_NAME Extended Validation, 2.23.140.1.1
	perfectCAEVRandomOID	= $PCA_BASE_NAME EV Random OID, $PCA_BASE_RANDOM_EV_OID
	EOF
	
	[ "$assurance" = "1" ] && echo "perfectCAAssurance              = $PCA_BASE_NAME Assurance, 1.3.6.1.4.1.0.1.7.8"
	[ "$deviceass" = "1" ] && echo "perfectCADevice                 = $PCA_BASE_NAME Device Assurance, 1.3.6.1.4.1.0.1.7.9"
	[ "$trustlist" = "1" ] && echo "perfectCATrustList              = $PCA_BASE_NAME Trust List, $PCA_BASE_ETL_POLICY_OID"
	
	[ "$drivecrypt" = "1" ] && echo "bitlockerDriveEncryption        = Microsoft BitLocker Drive Encryption, 1.3.6.1.4.1.311.67.1.1"
	[ "$drivecrypt" = "1" ] && echo "bitlockerDataRecoveryAgent      = Microsoft BitLocker Data Recovery Agent, 1.3.6.1.4.1.311.67.1.2"
	[ "$drivecrypt" = "1" ] && echo "keyRecoveryAgent                = Microsoft Key Recovery Agent, 1.3.6.1.4.1.311.21.6"
	
	echo ""
}

function config_ca_section_req()
{
	default_bits=""
	default_md=""
	
	case $1 in
		root-ca)
			default_bits="$PCA_ROOTCA_BITS"
			default_md="$PCA_ROOTCA_MD"
		;;
		master-ca)
			default_bits="$PCA_MASTERCA_BITS"
			default_md="$PCA_MASTERCA_MD"
		;;
		component-ca)
			default_bits="$PCA_COMPONENTCA_BITS"
			default_md="$PCA_COMPONENTCA_MD"
		;;
		network-ca)
			default_bits="$PCA_NETWORKCA_BITS"
			default_md="$PCA_NETWORKCA_MD"
		;;
		identity-ca)
			default_bits="$PCA_IDENTITYCA_BITS"
			default_md="$PCA_IDENTITYCA_MD"
		;;
		*)
			error 11 "Unkown CA for section req"
		;;
	esac
	
	cat <<-EOF
	[ req ]
	default_bits            = $default_bits
	encrypt_key             = yes
	default_md              = $default_md
	utf8                    = yes
	string_mask             = utf8only
	prompt                  = no
	distinguished_name      = ca_dn
	req_extensions          = ca_reqext

	EOF
}

function config_ca_section_dn()
{
	organizational_unit_name=""
	common_name=""
	
	case $1 in
		root-ca)
			organizational_unit_name="$PCA_ROOTCA_ORG_UNIT_NAME"
			common_name="$PCA_BASE_NAME Root CA"
		;;
		master-ca)
			organizational_unit_name="$PCA_MASTERCA_ORG_UNIT_NAME"
			common_name="$PCA_BASE_NAME Master CA"
		;;
		component-ca)
			organizational_unit_name="$PCA_COMPONENTCA_ORG_UNIT_NAME"
			common_name="$PCA_BASE_NAME Component CA"
		;;
		network-ca)
			organizational_unit_name="$PCA_NETWORKCA_ORG_UNIT_NAME"
			common_name="$PCA_BASE_NAME Network CA"
		;;
		identity-ca)
			organizational_unit_name="$PCA_IDENTITYCA_ORG_UNIT_NAME"
			common_name="$PCA_BASE_NAME Identity CA"
		;;
		*)
			error 11 "Unkown CA for section dn"
		;;
	esac
	
	cat <<-EOF
	[ ca_dn ]
	countryName             = "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     = "$PCA_DN_STATEORPROVINCENAME"
	localityName            = "$PCA_DN_LOCALITYNAME"
	streetAddress           = "$PCA_DN_STREETADDRESS"
	postalCode              = "$PCA_DN_POSTALCODE"
	owner			= "$PCA_DN_OWNER"
	organizationName        = "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  = "$organizational_unit_name"
	commonName              = "$common_name"

	EOF
}

function config_ca_section_reqext()
{
	key_usage=""
	basic_constraints=""
	subject_key_identifier=""
	
	case $1 in
		root-ca|master-ca|network-ca)
			key_usage="critical,keyCertSign,cRLSign"
			basic_constraints="critical,CA:true"
			subject_key_identifier="hash"
		;;
		component-ca|identity-ca)
			key_usage="critical,keyCertSign,cRLSign"
			basic_constraints="critical,CA:true,pathlen:0"
			subject_key_identifier="hash"
		;;
		*)
			error 11 "Unkown CA for section reqext"
		;;
	esac
	
	cat <<-EOF
	[ ca_reqext ]
	keyUsage                = $key_usage
	basicConstraints        = $basic_constraints
	subjectKeyIdentifier    = $subject_key_identifier

	EOF
}

function config_ca_section_crl_info()
{
	case $1 in
		root-ca|master-ca|network-ca|component-ca|identity-ca)
		;;
		*)
			error 11 "Unkown CA for section crl info"
		;;
	esac
	
	cat <<-EOF
	[ crl_ext ]
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	
	[ issuer_info ]
	caIssuers;URI.0         = \$aia_url
	
	[ crl_info ]
	URI.0                   = \$crl_url

	EOF
	
	[ "$1" = "component-ca" ] && cat <<-EOF
	[ ocsp_info ]
	caIssuers;URI.0         = \$aia_url
	OCSP;URI.0              = \$ocsp_url
	
	EOF
}

function config_ca_section_policies()
{
	mt_country_name="match"
	mt_state_or_province_name="optional"
	mt_locality_name="optional"
	mt_street_address="optional"
	mt_postal_code="optional"
	mt_owner="match"
	mt_organization_name="optional"
	mt_organizational_unit_name="optional"
	mt_common_name="supplied"
	
	any_domain_component="optional"
	any_country_name="optional"
	any_state_or_province_name="optional"
	any_locality_name="optional"
	any_street_address="optional"
	any_postal_code="optional"
	any_owner="optional"
	any_organization_name="optional"
	any_organizational_unit_name="optional"
	any_common_name="optional"
	any_email_address="optional"
	
	case $1 in
		root-ca|master-ca)
			mt_state_or_province_name="match"
			mt_locality_name="match"
			mt_street_address="match"
			mt_postal_code="match"
			mt_organization_name="match"
		;;
		network-ca|component-ca)
			mt_organization_name="match"
		;;
		identity-ca)
		;;
		*)
			error 11 "Unkown CA for section crl info"
		;;
	esac
	
	cat <<-EOF
	[ match_pol ]
	countryName             = $mt_country_name
	stateOrProvinceName     = $mt_state_or_province_name
	localityName            = $mt_locality_name
	streetAddress		= $mt_street_address
	postalCode		= $mt_postal_code
	owner			= $mt_owner
	organizationName        = $mt_organization_name
	organizationalUnitName  = $mt_organizational_unit_name
	commonName              = $mt_common_name
	EOF
	
	if [ "$1" = "component-ca" ]; then
		cat <<-EOF
		businessCategory        = optional
		serialNumber            = optional
		jurisdictionCountryName = optional
		jurisdictionLocalityName= optional
		jurisdictionStateOrProvinceName= optional
		
		EOF
	elif [ "$1" = "identity-ca" ]; then
		cat <<-EOF
		givenName               = optional
		name                    = optional
		surname                 = optional
		initials                = optional
		pseudonym               = optional
		telephoneNumber         = optional
		serialNumber            = optional
		description             = optional

		EOF
	else
		echo ""
	fi

	cat <<-EOF	
	[ any_pol ]
	domainComponent         = $any_domain_component
	countryName             = $any_country_name
	stateOrProvinceName     = $any_state_or_province_name
	localityName            = $any_locality_name
	streetAddress		= $any_street_address
	postalCode		= $any_postal_code
	owner			= $any_owner
	organizationName        = $any_organization_name
	organizationalUnitName  = $any_organizational_unit_name
	commonName              = $any_common_name
	emailAddress            = $any_email_address
	EOF
	
	if [ "$1" = "component-ca" ]; then
		cat <<-EOF
		businessCategory        = optional
		serialNumber            = optional
		jurisdictionCountryName = optional
		jurisdictionLocalityName= optional
		jurisdictionStateOrProvinceName= optional
		
		EOF
	elif [ "$1" = "identity-ca" ]; then
		cat <<-EOF
		givenName               = optional
		name                    = optional
		surname                 = optional
		initials                = optional
		pseudonym               = optional
		telephoneNumber         = optional
		serialNumber            = optional
		description             = optional

		EOF
	else
		echo ""
	fi
}

function config_ca_section_operational()
{
	default_ca=""
	default_md=""
	default_days=""
	default_crl_days=""
	x509_extensions=""
	
	case $1 in
		root-ca)
			default_ca="root_ca"
			default_md="$PCA_ROOTCA_MD"
			default_days="$PCA_ROOTCA_VALID_DAYS"
			default_crl_days="$PCA_ROOTCA_CRL_DAYS"
			x509_extensions="intermediate_ca_ext"
		;;
		master-ca)
			default_ca="master_ca"
			default_md="$PCA_MASTERCA_MD"
			default_days="$PCA_MASTERCA_VALID_DAYS"
			default_crl_days="$PCA_MASTERCA_CRL_DAYS"
			x509_extensions="intermediate_ca_ext"
		;;
		network-ca)
			default_ca="network_ca"
			default_md="$PCA_NETWORKCA_MD"
			default_days="$PCA_NETWORKCA_VALID_DAYS"
			default_crl_days="$PCA_NETWORKCA_CRL_DAYS"
			x509_extensions="signing_ca_ext"
		;;
		component-ca)
			default_ca="component_ca"
			default_md="$PCA_COMPONENTCA_MD"
			default_days="$PCA_COMPONENTCA_VALID_DAYS"
			default_crl_days="$PCA_COMPONENTCA_CRL_DAYS"
			x509_extensions="server_ext"
		;;
		identity-ca)
			default_ca="identity_ca"
			default_md="$PCA_IDENTITYCA_MD"
			default_days="$PCA_IDENTITYCA_VALID_DAYS"
			default_crl_days="$PCA_IDENTITYCA_CRL_DAYS"
			x509_extensions="identity_ext"
		;;
		*)
			error 11 "Unknown CA for operational section"
		;;
	esac
	
	cat <<-EOF
	[ ca ]
	default_ca              = $default_ca
	
	[ $default_ca ]
	certificate             = \$dir/ca/certs/\$ca.pem
	private_key             = \$dir/ca/\$ca/private/\$ca.key
	new_certs_dir           = \$dir/ca/\$ca/certs
	serial                  = \$dir/ca/\$ca/db/\$ca.pem.srl
	crlnumber               = \$dir/ca/\$ca/db/\$ca.crl.srl
	database                = \$dir/ca/\$ca/db/\$ca.db
	unique_subject          = no
	default_days            = $default_days
	default_md              = $default_md
	policy                  = match_pol
	email_in_dn             = no
	preserve                = no
	name_opt                = \$name_opt
	cert_opt                = ca_default
	copy_extensions         = none
	x509_extensions         = $x509_extensions
	default_crl_days        = $default_crl_days
	crl_extensions          = crl_ext

	EOF
}

function config_ca_section_ext()
{
	rootmaster=""
	network=""
	identity=""
	component=""
	ident=""
	
	case $1 in
		root-ca)
			ident="root_ca"
			rootmaster="1"
		;;
		master-ca)
			ident="master_ca"
			rootmaster="1"
		;;
		network-ca)
			ident="network_ca"
			network="1"
		;;
		identity-ca)
			ident="identity_ca"
			identity="1"
		;;
		component-ca)
			ident="component_ca"
			component="1"
		;;
		*)
			error 11 "Unknown CA for ext section"
		;;
	esac
	
	[ "$rootmaster" = "1" ] && cat <<-EOF
	[ ${ident}_ext ]
	keyUsage                = critical,keyCertSign,cRLSign
	basicConstraints        = critical,CA:true
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always

	[ intermediate_ca_ext ]
	keyUsage                = critical,keyCertSign,cRLSign
	basicConstraints        = critical,CA:true
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCAAssurance,perfectCADevice,perfectCATrustList,perfectCAExtenVal,perfectCAEVRandomOID

	[ ocspsign_ext ]
	keyUsage                = critical,digitalSignature
	basicConstraints        = CA:false
	extendedKeyUsage        = critical,OCSPSigning
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	noCheck                 = null
	certificatePolicies     = perfectCAAssurance,perfectCADevice,perfectCATrustList,perfectCAExtenVal,perfectCAEVRandomOID

	EOF
	
	[ "$network" = "1" ] && cat <<-EOF
	[ intermediate_ca_ext ]
	keyUsage                = critical,keyCertSign,cRLSign
	basicConstraints        = critical,CA:true
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCAAssurance,perfectCADevice,perfectCATrustList,perfectCAExtenVal,perfectCAEVRandomOID
	
	[ signing_ca_ext ]
	keyUsage                = critical,keyCertSign,cRLSign
	basicConstraints        = critical,CA:true,pathlen:0
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCAAssurance,perfectCADevice,perfectCATrustList,perfectCAExtenVal,perfectCAEVRandomOID
		
	[ ocspsign_ext ]
	keyUsage                = critical,digitalSignature
	basicConstraints        = CA:false
	extendedKeyUsage        = critical,OCSPSigning
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	noCheck                 = null
	certificatePolicies     = perfectCAAssurance,perfectCADevice,perfectCATrustList,perfectCAExtenVal,perfectCAEVRandomOID

	EOF
	
	[ "$identity" = "1" ] && cat <<-EOF
	[ identity_ext ]
	keyUsage                = critical,digitalSignature
	basicConstraints        = CA:false
	extendedKeyUsage        = emailProtection,clientAuth,codeSigning,msSmartcardLogin
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCAAssurance,perfectCATrustList
	
	[ windows_ext ]
	keyUsage                = critical,keyEncipherment,dataEncipherment,keyAgreement,digitalSignature
	basicConstraints        = CA:false
	extendedKeyUsage        = emailProtection,clientAuth,serverAuth,codeSigning,msEFS,bitlockerDriveEncryption,bitlockerDataRecoveryAgent,keyRecoveryAgent
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCAAssurance,perfectCATrustList
	
	[ encryption_ext ]
	keyUsage                = critical,keyEncipherment,dataEncipherment,keyAgreement
	basicConstraints        = CA:false
	extendedKeyUsage        = emailProtection,bitlockerDriveEncryption,bitlockerDataRecoveryAgent,keyRecoveryAgent,msEFS
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCAAssurance,perfectCATrustList
	
	[ smime_ext ]
	keyUsage                = critical,keyEncipherment,keyAgreement,digitalSignature
	basicConstraints        = CA:false
	extendedKeyUsage        = emailProtection
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCAAssurance,perfectCATrustList
	
	[ ocspsign_ext ]
	keyUsage                = critical,digitalSignature
	basicConstraints        = CA:false
	extendedKeyUsage        = critical,OCSPSigning
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	noCheck                 = null
	certificatePolicies     = perfectCAAssurance,perfectCATrustList

	EOF
	
	[ "$component" = "1" ] && cat <<-EOF
	[ ev_ext ]
	keyUsage                = critical,digitalSignature,keyEncipherment
	basicConstraints        = CA:false
	extendedKeyUsage        = serverAuth,clientAuth
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @ocsp_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = @cps_entrust,perfectCADevice,perfectCATrustList,perfectCAExtenVal,perfectCAEVRandomOID
	subjectAltName		= \$ENV::SAN
	
	[ server_ext ]
	keyUsage                = critical,digitalSignature,keyEncipherment
	basicConstraints        = CA:false
	extendedKeyUsage        = serverAuth,clientAuth
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @ocsp_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCADevice,perfectCATrustList
	subjectAltName		= \$ENV::SAN
	
	[ client_ext ]
	keyUsage                = critical,digitalSignature
	basicConstraints        = CA:false
	extendedKeyUsage        = clientAuth
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @ocsp_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCADevice,perfectCATrustList
	
	[ timestamp_ext ]
	keyUsage                = critical,digitalSignature
	basicConstraints        = CA:false
	extendedKeyUsage        = critical,timeStamping
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	crlDistributionPoints   = @crl_info
	certificatePolicies     = perfectCADevice,perfectCATrustList
	
	[ ocspsign_ext ]
	keyUsage                = critical,digitalSignature
	basicConstraints        = CA:false
	extendedKeyUsage        = critical,OCSPSigning
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always
	authorityInfoAccess     = @issuer_info
	noCheck                 = null
	certificatePolicies     = perfectCADevice,perfectCATrustList

	[ cps_entrust ]
	policyIdentifier = $PCA_BASE_CPS_POLICY_OID
	CPS.1 = $PCA_BASE_CPS_URL

	EOF
}

function config_ca_tmpl_ocspsign()
{
	cat <<-EOF
	[ default ]
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section     	        = include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, $PCA_BASE_ETL_POLICY_OID

	[ req ]
	default_bits            	= $PCA_OCSPSIGN_BITS
	encrypt_key             	= no
	default_md              	= $PCA_OCSPSIGN_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= ocspsign_dn
	req_extensions          	= ocspsign_reqext

	[ ocspsign_dn ]
	countryName    		        = "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default 	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_OCSPSIGN_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	commonName              	= "9. Common Name              (eg, full name)"
	commonName_max          	= 64

	[ ocspsign_reqext ]
	keyUsage                	= critical,digitalSignature
	extendedKeyUsage        	= critical,OCSPSigning
	subjectKeyIdentifier    	= hash
	perfectCATrustList      	= ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL

	EOF
}

function config_ca_tmpl_identity()
{
	cat <<-EOF
	[ default ]
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section             	= include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, $PCA_BASE_ETL_POLICY_OID
	perfectCAServiceEntry		= $PCA_BASE_NAME Service Entry, 1.3.6.1.5.5.7.8.7
	perfectCAXMPPJID		= $PCA_BASE_NAME XMPP JID, 1.3.6.1.5.5.7.8.5

	[ req ]
	default_bits            	= $PCA_IDENTITY_BITS
	encrypt_key             	= yes
	default_md              	= $PCA_IDENTITY_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= identity_dn
	req_extensions          	= identity_reqext
	
	[ identity_dn ]
	countryName             	= "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_IDENTITYCA_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	givenName                       = "9. First Name               (eg, Oliver)   "
	name                            = "10. Middle Name             (eg, Karl)     "
	surname                         = "11. Last Name               (eg, Welter)   "
	initials                        = "12. Initials                (eg, OW)       "
	pseudonym                       = "13. Pseudonym               (eg, username) "
	commonName              	= "14. Common Name             (eg, XMPP-JID) "
	commonName_max          	= 64
	emailAddress            	= "15. Email Address           (eg, name@fqdn)"
	emailAddress_max        	= 40
	telephoneNumber                 = "16. Telephone Number        (eg, 555-12345)"
	serialNumber                    = "17. Birthdate               (eg 2018-12-31)"
	description                     = "18. Description             (MAC-Addr@VLAN)"
	
	[ identity_reqext ]
	keyUsage                = critical,digitalSignature
	extendedKeyUsage        = emailProtection,clientAuth,codeSigning,msSmartcardLogin
	perfectCATrustList      = ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL
	subjectKeyIdentifier    = hash
	subjectAltName          = @subj_alt_name
	
	[ subj_alt_name ]
	EOF
	
	if [ "$PCA_BASE_XMPPHOST" != "" ]; then
	cat <<-EOF
	DNS.0			= $PCA_BASE_XMPPDOMAIN
	DNS.1			= $PCA_BASE_XMPPHOST
	otherName.0             = perfectCAServiceEntry;FORMAT:UTF8,UTF8:_xmpp-server.$PCA_BASE_XMPPHOST
	otherName.1             = perfectCAServiceEntry;FORMAT:UTF8,UTF8:_xmpp-client.$PCA_BASE_XMPPHOST
	otherName.2             = perfectCAServiceEntry;FORMAT:UTF8,UTF8:_xmpps-server.$PCA_BASE_XMPPHOST
	otherName.3             = perfectCAServiceEntry;FORMAT:UTF8,UTF8:_xmpps-client.$PCA_BASE_XMPPHOST
	otherName.4             = perfectCAXMPPJID;FORMAT:UTF8,UTF8:\${identity_dn::commonName}
	EOF
	else
	cat <<-EOF
	DNS			= $PCA_BASE_XMPPDOMAIN
	EOF
	fi
}

function config_ca_tmpl_windows()
{
	cat <<-EOF
	[ default ]
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section             	= include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, $PCA_BASE_ETL_POLICY_OID
	perfectCAServiceEntry		= $PCA_BASE_NAME Service Entry, 1.3.6.1.5.5.7.8.7
	bitlockerDriveEncryption        = Microsoft BitLocker Drive Encryption, 1.3.6.1.4.1.311.67.1.1
	bitlockerDataRecoveryAgent      = Microsoft BitLocker Data Recovery Agent, 1.3.6.1.4.1.311.67.1.2
	keyRecoveryAgent                = Microsoft Key Recovery Agent, 1.3.6.1.4.1.311.21.6

	[ req ]
	default_bits            	= $PCA_WINDOWS_BITS
	encrypt_key             	= yes
	default_md              	= $PCA_WINDOWS_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= windows_dn
	req_extensions          	= windows_reqext
	
	[ windows_dn ]
	countryName             	= "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_IDENTITYCA_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	givenName                       = "9. First Name               (eg, Oliver)   "
	name                            = "10. Middle Name             (eg, Karl)     "
	surname                         = "11. Last Name               (eg, Welter)   "
	initials                        = "12. Initials                (eg, OW)       "
	pseudonym                       = "13. Windows Username        (eg, username) "
	commonName              	= "14. Windows Hostname        (eg, hostname) "
	commonName_max          	= 64
	emailAddress            	= "15. Email Address           (eg, name@fqdn)"
	emailAddress_max        	= 40
	telephoneNumber                 = "16. Telephone Number        (eg, 555-12345)"
	serialNumber                    = "17. Birthdate               (eg 2018-12-31)"
	description                     = "18. Description             (MAC-Addr@VLAN)"
	
	[ windows_reqext ]
	keyUsage                = critical,keyEncipherment,dataEncipherment,keyAgreement,digitalSignature
	extendedKeyUsage        = emailProtection,clientAuth,serverAuth,codeSigning,bitlockerDriveEncryption,bitlockerDataRecoveryAgent,keyRecoveryAgent,msEFS
	perfectCATrustList      = ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL
	subjectKeyIdentifier    = hash
	subjectAltName          = \${ENV::SAN}	
	EOF
}

function config_ca_tmpl_timestamp()
{
	cat <<-EOF
	[ default ]
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section             	= include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, $PCA_BASE_ETL_POLICY_OID

	[ req ]
	default_bits            	= $PCA_TIMESTAMP_BITS
	encrypt_key             	= no
	default_md              	= $PCA_TIMESTAMP_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= timestamp_dn
	req_extensions          	= timestamp_reqext
	
	[ timestamp_dn ]
	countryName             	= "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_COMPONENTCA_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	commonName              	= "9. Common Name              (eg, full name)"
	commonName_max          	= 64
	
	[ timestamp_reqext ]
	keyUsage                	= critical,digitalSignature
	extendedKeyUsage        	= critical,timeStamping
	subjectKeyIdentifier    	= hash
	perfectCATrustList      	= ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL
	
	EOF
}

function config_ca_tmpl_encryption()
{
	cat <<-EOF
	[ default ]
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section             	= include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, $PCA_BASE_ETL_POLICY_OID
	bitlockerDriveEncryption        = Microsoft BitLocker Drive Encryption, 1.3.6.1.4.1.311.67.1.1
	bitlockerDataRecoveryAgent      = Microsoft BitLocker Data Recovery Agent, 1.3.6.1.4.1.311.67.1.2
	keyRecoveryAgent                = Microsoft Key Recovery Agent, 1.3.6.1.4.1.311.21.6

	[ req ]
	default_bits            	= $PCA_ENCRYPTION_BITS
	encrypt_key             	= yes
	default_md              	= $PCA_ENCRYPTION_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= encryption_dn
	req_extensions          	= encryption_reqext
	
	[ encryption_dn ]
	countryName             	= "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_IDENTITYCA_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	commonName              	= "9. Common Name              (eg, full name)"
	commonName_max          	= 64
	emailAddress            	= "10. Email Address           (eg, name@fqdn)"
	emailAddress_max        	= 40
	
	[ encryption_reqext ]
	keyUsage                	= critical,keyEncipherment,dataEncipherment,keyAgreement
	extendedKeyUsage        	= emailProtection,bitlockerDriveEncryption,bitlockerDataRecoveryAgent,keyRecoveryAgent,msEFS
	subjectKeyIdentifier    	= hash
	subjectAltName          	= email:move
	perfectCATrustList      	= ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL

	EOF
}

function config_ca_tmpl_smime()
{
	cat <<-EOF
	[ default ]
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section             	= include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, $PCA_BASE_ETL_POLICY_OID

	[ req ]
	default_bits            	= $PCA_SMIME_BITS
	encrypt_key             	= yes
	default_md              	= $PCA_SMIME_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= smime_dn
	req_extensions          	= smime_reqext
	
	[ smime_dn ]
	countryName             	= "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_IDENTITYCA_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	commonName              	= "9. Common Name              (eg, full name)"
	commonName_max          	= 64
	emailAddress            	= "10. Email Address           (eg, name@fqdn)"
	emailAddress_max        	= 40
	
	[ smime_reqext ]
	keyUsage                	= critical,keyEncipherment
	extendedKeyUsage        	= emailProtection
	subjectKeyIdentifier    	= hash
	subjectAltName          	= email:move
	perfectCATrustList      	= ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL

	EOF
}

function config_ca_tmpl_ev()
{
	cat <<-EOF
	[ default ]
	SAN                     	= DNS:$PCA_EV_SAN_DNS
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section             	= include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, $PCA_BASE_ETL_POLICY_OID
        perfectCAExtenVal       	= $PCA_BASE_NAME Extended Validation, 2.23.140.1.1
        perfectCAEVRandomOID    	= $PCA_BASE_NAME EV Random OID, $PCA_BASE_RANDOM_EV_OID

	[ req ]
	default_bits            	= $PCA_EV_BITS
	encrypt_key             	= no
	default_md              	= $PCA_EV_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= ev_dn
	req_extensions          	= ev_reqext
	
	[ ev_dn ]
	countryName             	= "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_COMPONENTCA_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	commonName              	= "9. Common Name              (eg, full name)"
	commonName_max          	= 64
	serialNumber                    = "10. Serial number           (eg, 1234567)  "
	businessCategory        	= "11. Business Category       (eg, private)  "
	businessCategory_default	= "$PCA_DN_BUSINESSCATEGORY"
	jurisdictionLocalityName        = "12. Inc. Locality Name      (eg, city)     "
	jurisdictionLocalityName_default= "$PCA_DN_LOCALITYNAME"
	jurisdictionStateOrProvinceName = "13. Inc. State or Prov.     (eg, reg.)     "
	jurisdictionStateOrProvinceName_default= "$PCA_DN_STATEORPROVINCENAME"
	jurisdictionCountryName         = "14. Inc. Country            (eg, DE)       "
	jurisdictionCountryName_default	= "$PCA_DN_COUNTRYNAME"
	
	[ ev_reqext ]
	keyUsage                	= critical,digitalSignature,keyEncipherment
	extendedKeyUsage        	= serverAuth,clientAuth
	perfectCATrustList      	= ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL
	certificatePolicies     	= perfectCAExtenVal,perfectCAEVRandomOID
	subjectKeyIdentifier    	= hash
	subjectAltName          	= \${ENV::SAN}

	EOF
}

function config_ca_tmpl_server()
{
	cat <<-EOF
	[ default ]
	SAN                     	= DNS:$PCA_SERVER_SAN_DNS
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section             	= include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, $PCA_BASE_ETL_POLICY_OID

	[ req ]
	default_bits            	= $PCA_SERVER_BITS
	encrypt_key             	= no
	default_md              	= $PCA_SERVER_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= server_dn
	req_extensions          	= server_reqext
	
	[ server_dn ]
	countryName             	= "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_COMPONENTCA_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	commonName              	= "9. Common Name              (eg, full name)"
	commonName_max          	= 64
	
	[ server_reqext ]
	keyUsage                	= critical,digitalSignature,keyEncipherment
	extendedKeyUsage        	= serverAuth,clientAuth
	perfectCATrustList      	= ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL
	subjectKeyIdentifier    	= hash
	subjectAltName          	= \${ENV::SAN}

	EOF
}

function config_ca_tmpl_client()
{
	cat <<-EOF
	[ default ]
	openssl_conf			= openssl_init
	
	[ openssl_init ]
	oid_section             	= include_oids

	[ include_oids ]
	perfectCATrustList      	= $PCA_BASE_NAME Trust List, $PCA_BASE_ETL_POLICY_OID

	[ req ]
	default_bits            	= $PCA_CLIENT_BITS
	encrypt_key             	= no
	default_md              	= $PCA_CLIENT_MD
	utf8                    	= yes
	string_mask             	= utf8only
	prompt                  	= yes
	distinguished_name      	= client_dn
	req_extensions          	= client_reqext
	
	[ client_dn ]
	countryName             	= "1. Country Name (2 letters) (eg, US)       "
	countryName_max         	= 2
	countryName_default		= "$PCA_DN_COUNTRYNAME"
	stateOrProvinceName     	= "2. State or Province Name   (eg, region)   "
	stateOrProvinceName_default	= "$PCA_DN_STATEORPROVINCENAME"
	localityName            	= "3. Locality Name            (eg, city)     "
	localityName_default		= "$PCA_DN_LOCALITYNAME"
	postalCode              	= "4. Postal code              (eg, 12345)    "
	postalCode_max          	= 5
	postalCode_default		= "$PCA_DN_POSTALCODE"
	streetAddress           	= "5. Street address           (eg, street)   "
	streetAddress_default		= "$PCA_DN_STREETADDRESS"
	organizationName        	= "6. Organization Name        (eg, company)  "
	organizationName_default	= "$PCA_DN_ORGANIZATIONNAME"
	organizationalUnitName  	= "7. Organizational Unit Name (eg, section)  "
	organizationalUnitName_default	= "$PCA_COMPONENTCA_ORG_UNIT_NAME"
	owner                   	= "8. Owner                    (eg, name)     "
	owner_default			= "$PCA_DN_OWNER"
	commonName              	= "9. Common Name              (eg, full name)"
	commonName_max          	= 64
	
	[ client_reqext ]
	keyUsage                	= critical,digitalSignature
	extendedKeyUsage        	= clientAuth
	subjectKeyIdentifier    	= hash
	perfectCATrustList         	= ASN1:UTF8String:$PCA_BASE_TRUSTLIST_URL

	EOF
}

function configuration_write()
{
	for ca in root-ca master-ca component-ca network-ca identity-ca; do
		config_file="$PCA_BASE_PATH/ca/conf/$ca.conf"
		config_header $ca > $config_file || return 1
		config_ca_section_default $ca >> $config_file 
		config_ca_section_req $ca >> $config_file
		config_ca_section_dn $ca >> $config_file
		config_ca_section_reqext $ca >> $config_file
		config_ca_section_crl_info $ca >> $config_file
		config_ca_section_policies $ca >> $config_file
		config_ca_section_operational $ca >> $config_file
		config_ca_section_ext $ca >> $config_file
		chmod 640 $config_file >/dev/null 2>&1
	done
	
	config_header "OCSP-Signing template" > $PCA_BASE_PATH/ca/conf/ocspsign.conf || return 2
	config_ca_tmpl_ocspsign >> $PCA_BASE_PATH/ca/conf/ocspsign.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/ocspsign.conf >/dev/null 2>&1

	config_header "Identity template" > $PCA_BASE_PATH/ca/conf/identity.conf || return 2
	config_ca_tmpl_identity >> $PCA_BASE_PATH/ca/conf/identity.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/identity.conf >/dev/null 2>&1

	config_header "Windows template" > $PCA_BASE_PATH/ca/conf/windows.conf || return 2
	config_ca_tmpl_windows >> $PCA_BASE_PATH/ca/conf/windows.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/windows.conf >/dev/null 2>&1

	config_header "Timestamp template" > $PCA_BASE_PATH/ca/conf/timestamp.conf || return 2
	config_ca_tmpl_timestamp >> $PCA_BASE_PATH/ca/conf/timestamp.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/timestamp.conf >/dev/null 2>&1

	config_header "Encryption template" > $PCA_BASE_PATH/ca/conf/encryption.conf || return 2
	config_ca_tmpl_encryption >> $PCA_BASE_PATH/ca/conf/encryption.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/encryption.conf >/dev/null 2>&1

	config_header "SMIME template" > $PCA_BASE_PATH/ca/conf/smime.conf || return 2
	config_ca_tmpl_smime >> $PCA_BASE_PATH/ca/conf/smime.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/smime.conf >/dev/null 2>&1

	config_header "Extended Validation template" > $PCA_BASE_PATH/ca/conf/ev.conf || return 2
	config_ca_tmpl_ev >> $PCA_BASE_PATH/ca/conf/ev.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/ev.conf >/dev/null 2>&1

	config_header "Server template" > $PCA_BASE_PATH/ca/conf/server.conf || return 2
	config_ca_tmpl_server >> $PCA_BASE_PATH/ca/conf/server.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/server.conf >/dev/null 2>&1

	config_header "Client template" > $PCA_BASE_PATH/ca/conf/client.conf || return 2
	config_ca_tmpl_client >> $PCA_BASE_PATH/ca/conf/client.conf
	chmod 640 $PCA_BASE_PATH/ca/conf/client.conf >/dev/null 2>&1
}

# END CONFIGURATION WRITE
##########################

##########################
# HELP CONTEXT

function help_context()
{
	cat <<-EOF
	##############################################################################
	#                                                                            #
	# Help and information:                                                      #
	# =====================                                                      #
	#                                                                            #
	# --help                           Show (this) help context.                 #
	# --help-switches                  Show useable switches.                    #
	#                                                                            #
	# --license                        Show license information.                 #
	# --version                        Show version information                  #
	#                                                                            #
	##############################################################################
	EOF
}

# END HELP CONTEXT
##########################

##########################
# HELP SWITCHES

function help_switches()
{
	cat <<-EOF
	##############################################################################
	#                                                                            #
	# Help and information:                                                      #
	# =====================                                                      #
	#                                                                            #
	# --help                           Show help context.                        #
	# --help-switches                  Show useable switches (this).             #
	# --license                        Show license information.                 #
	# --version                        Show version information                  #
	#                                                                            #
	# Operation modes:                                                           #
	# ================                                                           #
	#                                                                            #
	# --setup                          Setup new CA and PGP infrastructure.      #
	# --setup-ca                       Setup new certificate authorities only.   #
	# --setup-pgp                      Setup new pretty good privacy only.       #
	# --show-pgp-keybox                Show the GnuPG public keybox.             #
	# --show-pgp-keylist               Show the GnuPG keylist.                   #
	# --ocsp-server [port]             Start OCSP server on [port].              #
	# --ocsp-verify [port]             Verify OCSP server on [port].             #
	# --export-chain                   Export certificate chain of selected CA.  #
	# --create-request                 Create a new certificate signing req.     #
	# --sign-request                   Sign a previously created CSR.            #
	# --create-certificate             Create a CSR and sign it.                 #
	# --update-crl                     Update a certificate revocation list.     #
	# --encrypt-private                Encrypt the private key of specified CA.  #
	# --decrypt-private                Decrypt the private key of specified CA.  #
	# --pkcs12                         Create .p12 file from certificate.        #
	# --revoke                         Revoke a certificate.                     #
	# --renew-ca                       Renew expired certificate authorities.    #
	# --validate                       Verify a given certificate file.          #
	# --update                         Check for updates on GitHub.              #
	# --install                        Install available updates from GitHub.    #
	# --create-crontab                 Create (show) the CA maintain crontab.    #
	# --create-ocsp-systemd-service    Create (show) an ocsp systemd service.    #
	# --force-hashcode-ack             Writes the current hashcode to data file. #
	# --force-checksum-ack             Writes the current checksum to data file. #
	# --backup                         Backup the current certificate authority. #
	# --restore                        Restore the given certificate authority.  #
	#                                                                            #
	# Generic switches:                                                          #
	# =================                                                          #
	#                                                                            #
	# --filename [file]                Filename to use for specific operation.   #
	# --days [days]                    Set valid days for certificate.           #
	# --subject [subject]              Use subject instead of predefined DN.     #
	# --nodes                          Do not encrypt the private key of a cert. #
	# --skip-pkcs12                    Do not auto-generate a .p12 file.         #
	# --skip-gracetime                 Skip grace period for certificate renewal.#
	# --crl-reason [reason]            Set revocation reason (def. superseded).  #
	# --name [name]                    Set name for .p12 files.                  #
	# --password [password]            Use password from command line in exports.#
	# --force                          Force overwrite of existing CA files in   #
	#                                  setup mode or force renew of CA certs.    #
	# --select-ca [CA]                 Select a specified CA from:               #
	#                                  root-ca, master-ca, network-ca,           #
	#                                  component-ca (default) or identity-ca     #
	# --select-store [STORE]           Select a specified store from:            #
	#                                  root-store, master-store, network-store,  #
	#                                  component-store (def.) or identity-store  #
	# --rc [rcfile]                    Use alternate resource control file.      #
	# --ssl-certs [path]               Path to systems SSL database.             #
	# --ssl-ca [path]                  Path to systems SSL CA subdirectory.      #
	# --export-san [data]              Export SAN variable with given data.      #
	#                                                                            #
	# Set configuration to use:                                                  #
	# =========================                                                  #
	# (needed for create-request, sign-request and pkcs12)                       #
	# (--xxx-ca can be used as a shortcut for --select-ca when using --revoke)   #
	#                                                                            #
	# --root-ca                        Use configuration for Root-CA.            #
	# --master-ca                      Use configuration for Master-CA.          #
	# --network-ca                     Use configuration for Network-CA.         #
	# --component-ca                   Use configuration for Component-CA.       #
	# --identity-ca                    Use configuration for Identity-CA.        #
	# --identity                       Use configuration for an identity cert.   #
	# --windows                        Use configuration for a windows cert.     #
	# --ev                             Use configuration for extended validation.#
	# --server                         Use configuration for a server cert.      #
	# --client                         Use configuration for a client cert.      #
	# --timestamp                      Use configuration for a timestamp cert.   #
	# --encryption                     Use configuration for an encryption cert. #
	# --ocspsign                       Use configuration for an OCSP-Sign cert.  #
	#                                                                            #
	# Override default settings and RC definitions:                              #
	# =============================================                              #
	#                                                                            #
	# --base-path [...]                                                          #
	# --base-name [...]                                                          #
	# --base-ocsp-url [...]                                                      #
	# --base-pki-url [...]                                                       #
	# --base-trustlist-url [...]                                                 #
	#                                                                            #
	# --dn-countryname [...]                                                     #
	# --dn-stateorprovincename [...]                                             #
	# --dn-localityname [...]                                                    #
	# --dn-streetaddress [...]                                                   #
	# --dn-postalcode [...]                                                      #
	# --dn-owner [...]                                                           #
	# --dn-organizationname [...]                                                #
	# --dn-businesscategory [...]                                                #
	#                                                                            #
	# --root-ca-bits [...]                                                       #
	# --root-ca-md [...]                                                         #
	# --root-ca-valid-days [...]                                                 #
	# --root-ca-crl-days [...]                                                   #
	# --root-ca-org-unit-name [...]                                              #
	# --root-ca-ocsp-port [...]                                                  #
	#                                                                            #
	# --master-ca-bits [...]                                                     #
	# --master-ca-md [...]                                                       #
	# --master-ca-valid-days [...]                                               #
	# --master-ca-crl-days [...]                                                 #
	# --master-ca-org-unit-name [...]                                            #
	# --master-ca-ocsp-port [...]                                                #
	#                                                                            #
	# --network-ca-bits [...]                                                    #
	# --network-ca-md [...]                                                      #
	# --network-ca-valid-days [...]                                              #
	# --network-ca-crl-days [...]                                                #
	# --network-ca-org-unit-name [...]                                           #
	# --network-ca-ocsp-port [...]                                               #
	#                                                                            #
	# --component-ca-bits [...]                                                  #
	# --component-ca-md [...]                                                    #
	# --component-ca-valid-days [...]                                            #
	# --component-ca-crl-days [...]                                              #
	# --component-ca-org-unit-name [...]                                         #
	# --component-ca-ocsp-port [...]                                             #
	#                                                                            #
	# --identity-ca-bits [...]                                                   #
	# --identity-ca-md [...]                                                     #
	# --identity-ca-valid-days [...]                                             #
	# --identity-ca-crl-days [...]                                               #
	# --identity-ca-org-unit-name [...]                                          #
	# --identity-ca-ocsp-port [...]                                              #
	#                                                                            #
	# --ocspsign-bits [...]                                                      #
	# --ocspsign-md [...]                                                        #
	#                                                                            #
	# --encryption-bits [...]                                                    #
	# --encryption-md [...]                                                      #
	#                                                                            #
	# --timestamp-bits [...]                                                     #
	# --timestamp-md [...]                                                       #
	#                                                                            #
	# --client-bits [...]                                                        #
	# --client-md [...]                                                          #
	#                                                                            #
	# --ev-bits [...]                                                            #
	# --ev-md [...]                                                              #
	# --ev-san-dns [...]                                                         #
	#                                                                            #
	# --server-bits [...]                                                        #
	# --server-md [...]                                                          #
	# --server-san-dns [...]                                                     #
	#                                                                            #
	# --identity-bits [...]                                                      #
	# --identity-md [...]                                                        #
	#                                                                            #
	# --smime-bits [...]                                                         #
	# --smime-md [...]                                                           #
	#                                                                            #
	# --windows-bits [...]                                                       #
	# --windows-md [...]                                                         #
	#                                                                            #
	# --gracedays [...]                                                          #
	#                                                                            #
	##############################################################################	
	EOF
}

# END HELP CONTEXT
##########################

##########################
# CLI ARGUMENTS

PCA_OPMODE=""
PCA_USE_CONFIG=""
PCA_PASSWORD=""
PCA_FORCE=""
PCA_SELECTED_CA="component-ca"
PCA_SELECTED_STORE="component-store"
PCA_FILENAME=""
PCA_DAYS=""
PCA_NAME=""
PCA_CRL_REASON="superseded"
PCA_SUBJECT=""
PCA_NODES=""
PCA_OCSP_PORT=""
PCA_SKIP_PKCS12=""
PCA_SKIP_GRACE=""
PCA_CMD=`echo $* | cut -d \  -f2`
PCA_CMD_VERSION_RAW=`echo $* | $PCA_GREP "version raw" >/dev/null 2>&1 && echo 1`
PCA_CMD_HEADLESS=`echo $* | $PCA_GREP "headless" > /dev/null 2>&1 && echo 1`

[ "$PCA_CMD_VERSION_RAW" = "" -a "$PCA_CMD_HEADLESS" = "" ] && cat <<EOF

 [0;1;31;91mm[0;1;33;93mmm[0;1;32;92mmm[0m                  [0;1;31;91mm"[0;1;33;93m"[0m                  [0;1;34;94mm[0m             [0;1;35;95mm[0;1;31;91mmm[0m    [0;1;36;96mmm[0m  
 [0;1;33;93m#[0m   [0;1;36;96m"[0;1;34;94m#[0m  [0;1;35;95mm[0;1;31;91mmm[0m    [0;1;36;96mm[0m [0;1;34;94mmm[0m  [0;1;31;91mmm[0;1;33;93m#m[0;1;32;92mm[0m   [0;1;34;94mmm[0;1;35;95mm[0m    [0;1;33;93mm[0;1;32;92mmm[0m   [0;1;34;94mm[0;1;35;95mm#[0;1;31;91mmm[0m         [0;1;35;95mm[0;1;31;91m"[0m   [0;1;32;92m"[0m   [0;1;34;94m##[0m  
 [0;1;32;92m#[0;1;36;96mmm[0;1;34;94mm#[0;1;35;95m"[0m [0;1;31;91m#"[0m  [0;1;32;92m#[0m   [0;1;34;94m#"[0m  [0;1;31;91m"[0m   [0;1;32;92m#[0m    [0;1;34;94m#[0;1;35;95m"[0m  [0;1;31;91m#[0m  [0;1;32;92m#"[0m  [0;1;34;94m"[0m    [0;1;31;91m#[0m           [0;1;31;91m#[0m       [0;1;34;94m#[0m  [0;1;31;91m#[0m 
 [0;1;36;96m#[0m      [0;1;33;93m#"[0;1;32;92m""[0;1;36;96m"[0m   [0;1;35;95m#[0m       [0;1;36;96m#[0m    [0;1;35;95m#[0;1;31;91m""[0;1;33;93m""[0m  [0;1;36;96m#[0m        [0;1;33;93m#[0m     [0;1;34;94m"[0;1;35;95m""[0m   [0;1;33;93m#[0m       [0;1;35;95m#[0;1;31;91mmm[0;1;33;93m#[0m 
 [0;1;34;94m#[0m      [0;1;32;92m"#[0;1;36;96mmm[0;1;34;94m"[0m   [0;1;31;91m#[0m       [0;1;34;94m#[0m    [0;1;31;91m"[0;1;33;93m#m[0;1;32;92mm"[0m  [0;1;34;94m"#[0;1;35;95mmm[0;1;31;91m"[0m    [0;1;32;92m"[0;1;36;96mmm[0m          [0;1;36;96m"m[0;1;34;94mmm[0;1;35;95m"[0m [0;1;31;91m#[0m    [0;1;32;92m#[0m

EOF

log "Invoked: $PCA_REALCMD $*"

for arg in $*; do
	case $1 in
		--license)
			license
			exit 255
		;;
		--help)
			help_context
			exit 255
		;;
		--help-switches)
			help_switches
			exit 254
		;;
		--version)
			check_version="$2"
			shift
			
			if [ "$check_version" = "" ]; then
				version
			else
				version $check_version
			fi
		;;
		--export-chain)
			PCA_OPMODE="export-chain"
		;;
		--setup)
			PCA_OPMODE="setup"
		;;
		--setup-ca)
			PCA_OPMODE="setup-ca"
		;;
		--setup-pgp)
			PCA_OPMODE="setup-pgp"
		;;
		--show-pgp-keybox)
			PCA_OPMODE="show-pgp-keybox"
		;;
		--show-pgp-keylist)
			PCA_OPMODE="show-pgp-keylist"
		;;
		--ocsp-server)
			PCA_OPMODE="ocsp-server"
			PCA_OCSP_PORT="$2"
			shift
		;;
		--ocsp-verify)
			PCA_OPMODE="ocsp-verify"
			PCA_OCSP_PORT="$2"
			shift
		;;
		--password)
			PCA_PASSWORD="$2"
			shift
		;;
		--force)
			PCA_FORCE="yes"
		;;
		--update)
			PCA_OPMODE="update"
		;;
		--install)
			PCA_OPMODE="install"
		;;
		--backup)
			PCA_OPMODE="backup"
		;;
		--restore)
			PCA_OPMODE="restore"
		;;
		--days)
			PCA_DAYS="$2"
			shift
		;;
		--subject)
			PCA_SUBJECT="$2"
			shift
		;;
		--nodes)
			PCA_NODES="1"
		;;
		--skip-pkcs12)
			PCA_SKIP_PKCS12="1"
		;;
		--skip-gracetime)
			PCA_SKIP_GRACE="1"
		;;
		--validate)
			PCA_OPMODE="validate"
		;;
		--select-ca)
			PCA_SELECTED_CA="$2"
			shift
		;;
		--select-store)
			PCA_SELECTED_STORE="$2"
			shift
		;;
		--identity-ca)
			if [ "$PCA_OPMODE" = "revoke" -o "$PCA_OPMODE" = "ocsp-server" -o "$PCA_OPMODE" = "update-crl" -o "$PCA_OPMODE" = "create-ocsp-sysd" -o "$PCA_OPMODE" = "create-certificate" ]; then
				PCA_SELECTED_CA="identity-ca"
			fi			
		;;
		--component-ca)
			if [ "$PCA_OPMODE" = "revoke" -o "$PCA_OPMODE" = "ocsp-server" -o "$PCA_OPMODE" = "update-crl" -o "$PCA_OPMODE" = "create-ocsp-sysd" -o "$PCA_OPMODE" = "create-certificate" ]; then
				PCA_SELECTED_CA="component-ca"
			fi			
		;;
		--network-ca)
			if [ "$PCA_OPMODE" = "revoke" -o "$PCA_OPMODE" = "ocsp-server" -o "$PCA_OPMODE" = "update-crl" -o "$PCA_OPMODE" = "create-ocsp-sysd" -o "$PCA_OPMODE" = "create-certificate" ]; then
				PCA_SELECTED_CA="network-ca"
			fi			
		;;
		--master-ca)
			if [ "$PCA_OPMODE" = "revoke" -o "$PCA_OPMODE" = "ocsp-server" -o "$PCA_OPMODE" = "update-crl" -o "$PCA_OPMODE" = "create-ocsp-sysd" -o "$PCA_OPMODE" = "create-certificate" ]; then
				PCA_SELECTED_CA="master-ca"
			fi			
			PCA_USE_CONFIG="master_ca"
		;;
		--root-ca)
			if [ "$PCA_OPMODE" = "revoke" -o "$PCA_OPMODE" = "ocsp-server" -o "$PCA_OPMODE" = "update-crl" -o "$PCA_OPMODE" = "create-ocsp-sysd" -o "$PCA_OPMODE" = "create-certificate" ]; then
				PCA_SELECTED_CA="root-ca"
			fi			
			PCA_USE_CONFIG="root_ca"
		;;
		--update-crl)
		 	PCA_OPMODE="update-crl"
		;;
		--create-certificate)
			PCA_OPMODE="create-certificate"
		;;
		--create-request)
			PCA_OPMODE="create-request"
		;;
		--sign-request)
			PCA_OPMODE="sign-request"
		;;
		--pkcs12)
			PCA_OPMODE="pkcs12"
		;;
		--revoke)
			PCA_OPMODE="revoke"
		;;
		--renew-ca)
			PCA_OPMODE="renew-ca"
		;;
		--crl-reason)
			PCA_CRL_REASON="$2"
			shift
		;;
		--name)
			PCA_NAME="$2"
			shift
		;;
		--filename)
			PCA_FILENAME="$2"
			shift
		;;
		--signing-ca)
			PCA_USE_CONFIG="signing_ca"
		;;
		--intermediate-ca)
			PCA_USE_CONFIG="intermediate_ca"
		;;
		--identity)
			PCA_USE_CONFIG="identity"
		;;
		--windows)
			PCA_USE_CONFIG="windows"
		;;
		--ev)
			PCA_USE_CONFIG="ev"
		;;
		--server)
			PCA_USE_CONFIG="server"
		;;
		--client)
			PCA_USE_CONFIG="client"
		;;
		--timestamp)
			PCA_USE_CONFIG="timestamp"
		;;
		--encryption)
			PCA_USE_CONFIG="encryption"
		;;
		--smime)
			PCA_USE_CONFIG="smime"
		;;
		--windows)
			PCA_USE_CONFIG="windows"
		;;
		--ocspsign)
			PCA_USE_CONFIG="ocspsign"
		;;
		--encrypt-private)
		 	PCA_OPMODE="encrypt-private"
		;;
		--decrypt-private)
		 	PCA_OPMODE="decrypt-private"
		;;
		--rc)
			[ -f "$2" ] && . $2
			shift
		;;
		--base-path)
			PCA_BASE_PATH="$2"
			shift
		;;
		--base-name)
			PCA_BASE_NAME="$2"
			shift
		;;
		--base-ocsp-url)
			PCA_BASE_OCSP_URL="$2"
			shift
		;;
		--base-pki-url)
			PCA_BASE_PKI_URL="$2"
			shift
		;;
		--base-trustlist-url)
			PCA_BASE_TRUSTLIST_URL="$2"
			shift
		;;
		--dn-countryname)
			PCA_DN_COUNTRYNAME="$2"
			shift
		;;
		--dn-stateorprovincename)
			PCA_DN_STATEORPROVINCENAME="$2"
			shift
		;;
		--dn-localityname)
			PCA_DN_LOCALITYNAME="$2"
			shift
		;;
		--dn-streetaddress)
			PCA_DN_STREETADDRESS="$2"
			shift
		;;
		--dn-postalcode)
			PCA_DN_POSTALCODE="$2"
			shift
		;;
		--dn-owner)
			PCA_DN_OWNER="$2"
			shift
		;;
		--dn-organizationname)
			PCA_DN_ORGANIZATIONNAME="$2"
			shift
		;;
		--dn-businesscategory)
			PCA_DN_BUSINESSCATEGORY="$2"
			shift
		;;
		--root-ca-bits)
			PCA_ROOTCA_BITS="$2"
			shift
		;;
		--root-ca-md)
			PCA_ROOTCA_MD="$2"
			shift
		;;
		--root-ca-valid-days)
			PCA_ROOTCA_VALID_DAYS="$2"
			shift
		;;
		--root-ca-crl-days)
			PCA_ROOTCA_CRL_DAYS="$2"
			shift
		;;
		--root-ca-org-unit-name)
			PCA_ROOTCA_ORG_UNIT_NAME="$2"
			shift
		;;
		--root-ca-ocsp-port)
			PCA_ROOTCA_OCSP_PORT="$2"
			shift
		;;
		--master-ca-bits)
			PCA_MASTERCA_BITS="$2"
			shift
		;;
		--master-ca-md)
			PCA_MASTERCA_MD="$2"
			shift
		;;
		--master-ca-valid-days)
			PCA_MASTERCA_VALID_DAYS="$2"
			shift
		;;
		--master-ca-crl-days)
			PCA_MASTERCA_CRL_DAYS="$2"
			shift
		;;
		--master-ca-org-unit-name)
			PCA_MASTERCA_ORG_UNIT_NAME="$2"
			shift
		;;
		--master-ca-ocsp-port)
			PCA_MASTERCA_OCSP_PORT="$2"
			shift
		;;
		--component-ca-bits)
			PCA_COMPONENTCA_BITS="$2"
			shift
		;;
		--component-ca-md)
			PCA_COMPONENTCA_MD="$2"
			shift
		;;
		--component-ca-valid-days)
			PCA_COMPONENTCA_VALID_DAYS="$2"
			shift
		;;
		--component-ca-crl-days)
			PCA_COMPONENTCA_CRL_DAYS="$2"
			shift
		;;
		--component-ca-org-unit-name)
			PCA_COMPONENTCA_ORG_UNIT_NAME="$2"
			shift
		;;
		--component-ca-ocsp-port)
			PCA_COMPONENTCA_OCSP_PORT="$2"
			shift
		;;
		--network-ca-bits)
			PCA_NETWORKCA_BITS="$2"
			shift
		;;
		--network-ca-md)
			PCA_NETWORKCA_MD="$2"
			shift
		;;
		--network-ca-valid-days)
			PCA_NETWORKCA_VALID_DAYS="$2"
			shift
		;;
		--network-ca-crl-days)
			PCA_NETWORKCA_CRL_DAYS="$2"
			shift
		;;
		--network-ca-org-unit-name)
			PCA_NETWORKCA_ORG_UNIT_NAME="$2"
			shift
		;;
		--network-ca-ocsp-port)
			PCA_NETWORKCA_OCSP_PORT="$2"
			shift
		;;
		--identity-ca-bits)
			PCA_IDENTITYCA_BITS="$2"
			shift
		;;
		--identity-ca-md)
			PCA_IDENTITYCA_MD="$2"
			shift
		;;
		--identity-ca-valid-days)
			PCA_IDENTITYCA_VALID_DAYS="$2"
			shift
		;;
		--identity-ca-crl-days)
			PCA_IDENTITYCA_CRL_DAYS="$2"
			shift
		;;
		--identity-ca-org-unit-name)
			PCA_IDENTITYCA_ORG_UNIT_NAME="$2"
			shift
		;;
		--identity-ca-ocsp-port)
			PCA_IDENTITYCA_OCSP_PORT="$2"
			shift
		;;
		--ocspsign-bits)
			PCA_OCSPSIGN_BITS="$2"
			shift
		;;
		--ocspsign-md)
			PCA_OCSPSIGN_MD="$2"
			shift
		;;
		--timestamp-bits)
			PCA_TIMESTAMP_BITS="$2"
			shift
		;;
		--timestamp-md)
			PCA_TIMESTAMP_MD="$2"
			shift
		;;
		--encryption-bits)
			PCA_ENCRYPTION_BITS="$2"
			shift
		;;
		--encryption-md)
			PCA_ENCRYPTION_MD="$2"
			shift
		;;
		--ev-bits)
			PCA_EV_BITS="$2"
			shift
		;;
		--ev-md)
			PCA_EV_MD="$2"
			shift
		;;
		--ev-san-dns)
			PCA_EV_SAN_DNS="$2"
			shift
		;;
		--server-bits)
			PCA_SERVER_BITS="$2"
			shift
		;;
		--server-md)
			PCA_SERVER_MD="$2"
			shift
		;;
		--server-san-dns)
			PCA_SERVER_SAN_DNS="$2"
			shift
		;;
		--client-bits)
			PCA_CLIENT_BITS="$2"
			shift
		;;
		--client-md)
			PCA_CLIENT_MD="$2"
			shift
		;;
		--identity-bits)
			PCA_IDENTITY_BITS="$2"
			shift
		;;
		--identity-md)
			PCA_IDENTITY_MD="$2"
			shift
		;;
		--smime-bits)
			PCA_SMIME_BITS="$2"
			shift
		;;
		--smime-md)
			PCA_SMIME_MD="$2"
			shift
		;;
		--windows-bits)
			PCA_WINDOWS_BITS="$2"
			shift
		;;
		--windows-md)
			PCA_WINDOWS_MD="$2"
			shift
		;;
		--gracedays)
			PCA_GRACEDAYS="$2"
			shift
		;;
		--ssl-certs)
			PCA_SSL_CERTS="$2"
			shift
		;;
		--ssl-ca)
			PCA_SSL_CA="$2"
			shift
		;;
		--export-san)
			export SAN="$2"
			shift
		;;
		--create-crontab)
			PCA_OPMODE="create-crontab"
		;;
		--create-ocsp-systemd-service)
			PCA_OPMODE="create-ocsp-sysd"
		;;
	esac
	
	shift
done

[ "$PCA_CMD_HEADLESS" = "" ] && cat <<-EOF
 [0;1;34;94mCopyright (c) 2018 - 2020 [0;1;32;92mOliver Welter[0;1;34;94m <[0;1;36;96moliver@welter.rocks[0;1;34;94m>[0m
 [0;1;34;94mSee [0;1;32;93mhttps://github.com/WelterRocks/perfect-ca[0;1;34;94m for details.[0m

EOF

[ "$PCA_CMD" = "" ] && cat <<-EOF
 [0;1;34;94mThis program comes with ABSOLUTELY NO WARRANTY, licensed under GPLv3.[0m
 [0;1;34;94mThis is free software, and you are welcome to redistribute it[0m
 [0;1;34;94munder certain conditions; type '[0;1;31;91m$0 --license[0;1;34;94m' for details.[0m

EOF

# END CLI ARGUMENTS
##########################

##############################
# OPMODE: CREATE-OCSP-SYSD

if [ "$PCA_OPMODE" = "create-ocsp-sysd" ]; then
	log "Generate OCSP systemd service $PCA_PROGNAME-$PCA_SELECTED_CA-ocsp.service"
	config_header /lib/systemd/system/$PCA_PROGNAME-$PCA_SELECTED_CA-ocsp.service
	case $PCA_SELECTED_CA in
		root-ca)
		cat <<-EOF	
		[Unit]
		Description=Perfect-CA OCSP for Root-CA
		
		[Service]
		Type=simple
		ExecStart=$PCA_REALCMD --ocsp-server $PCA_ROOTCA_OCSP_PORT --root-ca --filename ocsp-root-ca
		CPUWeight=20
		CPUQuota=85%
		IOWeight=20
		MemorySwapMax=0
		TimeoutStartSec=900
		TimeoutStopSec=900
		LimitNOFILE=16364
		Nice=-5
		EOF
		;;
		master-ca)
		cat <<-EOF	
		[Unit]
		Description=Perfect-CA OCSP for Master-CA
		
		[Service]
		Type=simple
		ExecStart=$PCA_REALCMD --ocsp-server $PCA_MASTERCA_OCSP_PORT --master-ca --filename ocsp-master-ca
		CPUWeight=20
		CPUQuota=85%
		IOWeight=20
		MemorySwapMax=0
		TimeoutStartSec=900
		TimeoutStopSec=900
		LimitNOFILE=16364
		Nice=-4
		EOF
		;;
		network-ca)
		cat <<-EOF	
		[Unit]
		Description=Perfect-CA OCSP for Network-CA
		
		[Service]
		Type=simple
		ExecStart=$PCA_REALCMD --ocsp-server $PCA_NETWORKCA_OCSP_PORT --network-ca --filename ocsp-network-ca
		CPUWeight=20
		CPUQuota=85%
		IOWeight=20
		MemorySwapMax=0
		TimeoutStartSec=900
		TimeoutStopSec=900
		LimitNOFILE=16364
		Nice=-3
		EOF
		;;
		component-ca)
		cat <<-EOF	
		[Unit]
		Description=Perfect-CA OCSP for Component-CA
		
		[Service]
		Type=simple
		ExecStart=$PCA_REALCMD --ocsp-server $PCA_COMPONENTCA_OCSP_PORT --component-ca --filename ocsp-component-ca
		CPUWeight=20
		CPUQuota=85%
		IOWeight=20
		MemorySwapMax=0
		TimeoutStartSec=900
		TimeoutStopSec=900
		LimitNOFILE=16364
		Nice=-2
		EOF
		;;
		identity-ca)
		cat <<-EOF	
		[Unit]
		Description=Perfect-CA OCSP for Identity-CA
		
		[Service]
		Type=simple
		ExecStart=$PCA_REALCMD --ocsp-server $PCA_IDENTITYCA_OCSP_PORT --identity-ca --filename ocsp-identity-ca
		CPUWeight=20
		CPUQuota=85%
		IOWeight=20
		MemorySwapMax=0
		TimeoutStartSec=900
		TimeoutStopSec=900
		LimitNOFILE=16364
		Nice=-2
		EOF
		;;
		*)
		error 2 "Unknown CA selected"
		;;
	esac
	
	cat <<-EOF	
	
	[Install]
	WantedBy=multi-user.target
	EOF
	exit
fi

# END OPMODE: CREATE-OCSP-SYSD
##############################

############################
# OPMODE: CREATE-CRONTAB

if [ "$PCA_OPMODE" = "create-crontab" ]; then
	log "Generate maintainance crontab"
	config_header /etc/cron.d/perfect-ca
	cat <<-EOF	
	# Daily at 00:10, backup the CA
	10 0 * * * $PCA_REALCMD --backup >/dev/null 2>&1
	
	# Daily at 00:11, Check and renew the CA certificates, if neccessary
	11 0 * * * $PCA_REALCMD --renew-ca >/dev/null 2>&1
	
	# Daily at 00:12, update certificate revocation list of the Root-CA
	12 0 * * * $PCA_REALCMD --update-crl --root-ca >/dev/null 2>&1

	# Daily at 00:13 and 12:13, update certificate revocation list of the Master-CA
	13 */12 * * * $PCA_REALCMD --update-crl --master-ca >/dev/null 2>&1
	
	# Daily at 00:14, 06:14, 12:14 and 18:14, update certificate revocation list of the Network-CA
	14 */6 * * * $PCA_REALCMD --update-crl --network-ca >/dev/null 2>&1
	
	# Daily, each hour from 00:15 on, update certificate revocation list of the Component-CA and from 00:16 on from the Identity-CA
	15 * * * * $PCA_REALCMD --update-crl --component-ca >/dev/null 2>&1
	16 * * * * $PCA_REALCMD --update-crl --identity-ca >/dev/null 2>&1

	# Daily, from 00:17 to 00:20, export the certificate chains, including the Root-CA certificate and also convert them to pkcs7
	17 0 * * * $PCA_REALCMD --export-chain --root-ca --select-ca master-ca --filename $PCA_SSL_CA/master-chain.pem --force >/dev/null 2>&1 && $PCA_OPENSSL x509 -in $PCA_SSL_CA/master-chain.pem -out $PCA_SSL_CA/master-chain.crt -inform PEM -outform DER >/dev/null 2>&1 && $PCA_OPENSSL crl2pkcs7 -certfile $PCA_SSL_CA/master-chain.pem -out $PCA_SSL_CA/master-chain.p7c -nocrl >/dev/null 2>&1
	18 0 * * * $PCA_REALCMD --export-chain --root-ca --select-ca network-ca --filename $PCA_SSL_CA/network-chain.pem --force >/dev/null 2>&1 && $PCA_OPENSSL x509 -in $PCA_SSL_CA/network-chain.pem -out $PCA_SSL_CA/network-chain.crt -inform PEM -outform DER >/dev/null 2>&1 && $PCA_OPENSSL crl2pkcs7 -certfile $PCA_SSL_CA/network-chain.pem -out $PCA_SSL_CA/network-chain.p7c -nocrl >/dev/null 2>&1
	19 0 * * * $PCA_REALCMD --export-chain --root-ca --select-ca identity-ca --filename $PCA_SSL_CA/identity-chain.pem --force >/dev/null 2>&1 && $PCA_OPENSSL x509 -in $PCA_SSL_CA/identity-chain.pem -out $PCA_SSL_CA/identity-chain.crt -inform PEM -outform DER >/dev/null 2>&1 && $PCA_OPENSSL crl2pkcs7 -certfile $PCA_SSL_CA/identity-chain.pem -out $PCA_SSL_CA/identity-chain.p7c -nocrl >/dev/null 2>&1
	20 0 * * * $PCA_REALCMD --export-chain --root-ca --select-ca component-ca --filename $PCA_SSL_CA/component-chain.pem --force >/dev/null 2>&1 && $PCA_OPENSSL x509 -in $PCA_SSL_CA/component-chain.pem -out $PCA_SSL_CA/component-chain.crt -inform PEM -outform DER >/dev/null 2>&1 && $PCA_OPENSSL crl2pkcs7 -certfile $PCA_SSL_CA/component-chain.pem -out $PCA_SSL_CA/component-chain.p7c -nocrl >/dev/null 2>&1
	
	# Daily, every three hours from 00:21 and 00:22 on, rehash the certificate stores
	21 */3 * * * $PCA_C_REHASH $PCA_SSL_CERTS >/dev/null 2>&1
	22 */3 * * * $PCA_C_REHASH $PCA_BASE_PATH/ca/certs >/dev/null 2>&1
	
	# Set /var/www/pki to the path, where you publish your ca certificates
	# 23 */3 * * * $PCA_C_REHASH /var/www/pki >/dev/null 2>&1
	
	# Daily, every four hours from 00:24 to 00:28 on, restart the ocsp daemons
	24 */4 * * * systemctl stop $PCA_PROGNAME-root-ca-ocsp && systemctl start $PCA_PROGNAME-root-ca-ocsp >/dev/null 2>&1
	25 */4 * * * systemctl stop $PCA_PROGNAME-master-ca-ocsp && systemctl start $PCA_PROGNAME-master-ca-ocsp >/dev/null 2>&1
	26 */4 * * * systemctl stop $PCA_PROGNAME-network-ca-ocsp && systemctl start $PCA_PROGNAME-network-ca-ocsp >/dev/null 2>&1
	27 */4 * * * systemctl stop $PCA_PROGNAME-identity-ca-ocsp && systemctl start $PCA_PROGNAME-identity-ca-ocsp >/dev/null 2>&1
	28 */4 * * * systemctl stop $PCA_PROGNAME-component-ca-ocsp && systemctl start $PCA_PROGNAME-component-ca-ocsp >/dev/null 2>&1	
	EOF
	
	exit
fi

# END OPMODE: CREATE-CRONTAB
############################

##########################
# OPMODE: UPDATE

if [ "$PCA_OPMODE" = "update" -o "$PCA_OPMODE" = "install" ]; then
	[ -x "$PCA_GIT" ] || PCA_OPENSSL=`which git 2>/dev/null`
	[ -x "$PCA_GIT" ] || error 1 "Missing git"
	echo -n "[0;1;34;94mChecking for updates...[0m"
	mypwd=`pwd`
	check1=`$PCA_MD5SUM $PCA_REALCMD | $PCA_AWK '{print $1}'`
	tmp=`$PCA_MKTEMP -d -q --suffix .pca`
	[ "$tmp" = "" ] && error 5 "Unable to create tmp directory"
	cd $tmp &&
	$PCA_GIT clone $PCA_GITHUB >/dev/null 2>&1 && \
	echo $OK || echo $FAILED
	check2=`$PCA_MD5SUM -b $tmp/perfect-ca/$PCA_PROGNAME | $PCA_AWK '{print $1}'`
	cd $pwd
	if [ "$PCA_OPMODE" = "update" ]; then
		if [ "$check1" = "$check2" ]; then
			rm -rf $tmp >/dev/null 2>&1
			echo "[0;1;32;92mNo update available[0m"
			log "No update available for installation"
			exit
		else
			check_version=`$tmp/perfect-ca/$PCA_PROGNAME --version $PCA_VERSION >/dev/null 2>&1; echo $?`
			rm -rf $tmp >/dev/null 2>&1
			
			if [ "$check_version" = 2 -o "$check_version" = 4 -o "$check_version" = 6 ]; then
				echo "[0;1;32;91mUpdate available[0m"	
				log "Update available for installation"
				exit 1
			else
				echo "[0;1;32;93mNo update available, but GIT checksum differs.[0m"
				log "No update available, but GIT checksum differs"
				exit 255
			fi
		fi
	else
		if [ "$check1" = "$check2" ]; then
			rm -rf $tmp >/dev/null 2>&1
			echo "[0;1;32;92mNo installable update available[0m"
			log "No installable update available"
			exit 1
		else
			check_version=`$tmp/perfect-ca/$PCA_PROGNAME --version $PCA_VERSION >/dev/null 2>&1; echo $?`
			
			new_hashcode=`$tmp/perfect-ca/$PCA_PROGNAME --version | $PCA_GREP "^System-Hashcode:" | $PCA_AWK '{print $2}'`
			new_checksum=`$tmp/perfect-ca/$PCA_PROGNAME --version | $PCA_GREP "^Program-Checksum:" | $PCA_AWK '{print $2}'`

			if [ "$check_version" = 2 -o "$check_version" = 4 -o "$check_version" = 6 ]; then
				log "Installing update"
				echo -n "[0;1;34;94mInstalling update...[0m"
				inst=`cp -f $tmp/perfect-ca/$PCA_PROGNAME $PCA_REALCMD >/dev/null 2>&1 && echo 0 || echo 1`
				[ "$inst" = "0" ] && echo $OK || echo $FAILED
				[ "$inst" = "0" ] && log "Update installed successfully" || log "Failed to install update"
				[ "$inst" = "0" ] && echo "$new_hashcode" > $PCA_BASE_PATH/.hashcode
				[ "$inst" = "0" ] && echo "$new_checksum" > $PCA_BASE_PATH/.checksum
				rm -rf $tmp >/dev/null 2>&1
				exit $inst
			else
				echo "[0;1;32;93mGIT checksum differs, so install manually.[0m"
				log "GIT checksum differs, manual installation required"
				exit 254
			fi
		fi	
	fi
	
	exit
fi

# END OPMODE: UPDATE
##########################

##########################
# OPMODE: UPDATE-CRL

if [ "$PCA_OPMODE" = "update-crl" ]; then
	echo "[0;1;34;94mUpdate of $PCA_SELECTED_CA in progress.[0m"
	case $PCA_SELECTED_CA in
		root-ca|master-ca|network-ca|component-ca|identity-ca)
			hash=`$PCA_OPENSSL crl -hash -noout -in $PCA_BASE_PATH/ca/crl/$PCA_SELECTED_CA.xrl 2>/dev/null`
			rm -f $PCA_BASE_PATH/ca/crl/$hash.0 >/dev/null 2>&1
			rm -f $PCA_SSL_CERTS/$hash.0 >/dev/null 2>&1
			$PCA_OPENSSL ca -gencrl \
				-config $PCA_BASE_PATH/ca/conf/$PCA_SELECTED_CA.conf \
				-out $PCA_BASE_PATH/ca/crl/$PCA_SELECTED_CA.xrl && \
			$PCA_OPENSSL crl -outform der \
				-in $PCA_BASE_PATH/ca/crl/$PCA_SELECTED_CA.xrl \
				-out $PCA_BASE_PATH/ca/crl/$PCA_SELECTED_CA.crl >/dev/null 2>&1 || error 1 "Update failed"
			hash=`$PCA_OPENSSL crl -hash -noout -in $PCA_BASE_PATH/ca/crl/$PCA_SELECTED_CA.xrl 2>/dev/null`
			ln -sf $PCA_BASE_PATH/ca/crl/$PCA_SELECTED_CA.xrl $PCA_BASE_PATH/ca/crl/$hash.0 >/dev/null 2>&1
			ln -sf $PCA_BASE_PATH/ca/crl/$PCA_SELECTED_CA.xrl $PCA_SSL_CERTS/PCA_$PCA_SELECTED_CA.crl >/dev/null 2>&1
			ln -sf $PCA_SSL_CERTS/PCA_$PCA_SELECTED_CA.crl $PCA_SSL_CERTS/$hash.0 >/dev/null 2>&1
			log "CRL-Update of $PCA_SELECTED_CA done"
		;;
		*)
			error 7 "CRL-Update of unknown or invalid CA selected"
		;;
	esac
	
	exit
fi

# END OPMODE: UPDATE-CRL
##########################

##########################
# OPMODE: ENCRYPT-PRIVATE

if [ "$PCA_OPMODE" = "encrypt-private" ]; then
	echo "[0;1;34;94mEncrypting private key of $PCA_SELECTED_CA in progress.[0m"
	case $PCA_SELECTED_CA in
		root-ca|master-ca|network-ca|component-ca|identity-ca)
			$PCA_OPENSSL rsa -des -in $PCA_BASE_PATH/ca/$PCA_SELECTED_CA/private/$PCA_SELECTED_CA.key -out $PCA_BASE_PATH/ca/$PCA_SELECTED_CA/private/$PCA_SELECTED_CA.key && \
			log "Encrypted private key of $PCA_SELECTED_CA" || log "Encrypting private key of $PCA_SELECTED_CA failed"
		;;
		*)
			error 7 "Private key encryption of unknown or invalid CA selected"
		;;
	esac
	
	exit
fi

# END OPMODE: ENCRYPT-P...
##########################

##########################
# OPMODE: DECRYPT-PRIVATE

if [ "$PCA_OPMODE" = "decrypt-private" ]; then
	echo "[0;1;34;94mDecrypting private key of $PCA_SELECTED_CA in progress.[0m"
	case $PCA_SELECTED_CA in
		root-ca|master-ca|network-ca|component-ca|identity-ca)
			$PCA_OPENSSL rsa -in $PCA_BASE_PATH/ca/$PCA_SELECTED_CA/private/$PCA_SELECTED_CA.key -out $PCA_BASE_PATH/ca/$PCA_SELECTED_CA/private/$PCA_SELECTED_CA.key && \
			log "Decrypted private key of $PCA_SELECTED_CA" || log "Decrypting private key of $PCA_SELECTED_CA failed"
		;;
		*)
			error 7 "Private key decryption of unknown or invalid CA selected"
		;;
	esac
	
	exit
fi

# END OPMODE: DECRYPT-P...
##########################

##########################
# OPMODE: SETUP

if [ "$PCA_OPMODE" = "setup" ]; then
	if [ "$PCA_FORCE" = "" ]; then
		$0 --headless --setup-pgp && $0 --headless --setup-ca && exit || error 3 "Setup has been interrupted by previous errors."
	else
		$0 --headless --setup-pgp --force && $0 --headless --setup-ca --force && exit || error 3 "Forced setup has been interrupted by previous errors."
	fi
fi

# END OPMODE: SETUP
##########################

##########################
# OPMODE: SETUP-PGP

if [ "$PCA_OPMODE" = "setup-pgp" ]; then
	if [ "$PCA_FORCE" = "" ]; then
		[ -d "$PCA_GNUPG_BASE_PATH" ] && error 2 "Unable to start setup: PGP Home path exists"
	fi

	echo -n "[0;1;34;94mSetting up GnuPG paths...[0m"
	
	[ "$PCA_GNUPG_BASE_PATH" = "" ] && error 3 "Failsafe - GnuPG Home not set"
	[ -d "$PCA_GNUPG_BASE_PATH" ] && rm -rf $PCA_GNUPG_BASE_PATH >/dev/null 2>&1 
	
	[ -d "$PCA_GNUPG_BASE_PATH/root-store" ] || mkdir -p $PCA_GNUPG_BASE_PATH/root-store/archive.d >/dev/null 2>&1
	[ -d "$PCA_GNUPG_BASE_PATH/master-store" ] || mkdir -p $PCA_GNUPG_BASE_PATH/master-store/archive.d >/dev/null 2>&1
	[ -d "$PCA_GNUPG_BASE_PATH/network-store" ] || mkdir -p $PCA_GNUPG_BASE_PATH/network-store/archive.d >/dev/null 2>&1
	[ -d "$PCA_GNUPG_BASE_PATH/identity-store" ] || mkdir -p $PCA_GNUPG_BASE_PATH/identity-store/archive.d >/dev/null 2>&1
	[ -d "$PCA_GNUPG_BASE_PATH/component-store" ] || mkdir -p $PCA_GNUPG_BASE_PATH/component-store/archive.d >/dev/null 2>&1

	chmod -R 700 $PCA_GNUPG_BASE_PATH >/dev/null 2>&1
	echo $OK
	
	for store in root-store master-store network-store identity-store component-store; do
		echo -n "[0;1;34;94mPreparing GnuPG $store configuration...[0m"
		export GNUPGHOME="$PCA_GNUPG_BASE_PATH/$store"
		config_gnupg $store > $PCA_GNUPG_BASE_PATH/$store/gnupg.conf && \
		echolog "$OK" "Setup: GnuPG $store configuration setup succeeded" || echolog "$FAILED" "Setup: GnuPG $store configuration setup failed"
		
		add_sign=1
		add_auth=0
		add_encrypt=0

		GNUPG_OWNER_NAME="$PCA_GNUPG_ROOTSTORE_OWNER_NAME"
		GNUPG_OWNER_EMAIL="$PCA_GNUPG_ROOTSTORE_OWNER_EMAIL"

		if [ "$store" = "root-store" ]; then
			echo -n "[0;1;34;94mGenerating $store $PCA_GNUPG_MASTERKEY_CERT_ALGO-cert masterkey...[0m"
			$PCA_GNUPG --homedir "$PCA_GNUPG_BASE_PATH/$store" --batch --passphrase '' --quick-generate-key "$GNUPG_OWNER_NAME <$GNUPG_OWNER_EMAIL>" "$PCA_GNUPG_MASTERKEY_CERT_ALGO" cert $PCA_GNUPG_MASTERKEY_KEY_LIFETIME >/dev/null 2>&1 && \
			echolog "$OK" "Setup: GnuPG $store $PCA_GNUPG_MASTERKEY_CERT_ALGO-cert masterkey generated successfully" || echolog "$FAILED" "Setup: Failed generating GnuPG $store $PCA_GNUPG_MASTERKEY_CERT_ALGO-cert masterkey"
		else
			echo -n "[0;1;34;94mImporting masterkey for $store $PCA_GNUPG_MASTERKEY_CERT_ALGO-cert...[0m"
			importstore=""
			case $store in
				master-store)
					GNUPG_OWNER_NAME="$PCA_GNUPG_MASTERSTORE_OWNER_NAME"
					GNUPG_OWNER_EMAIL="$PCA_GNUPG_MASTERSTORE_OWNER_EMAIL"
					importstore="root-store"
				;;
				network-store)
					GNUPG_OWNER_NAME="$PCA_GNUPG_NETWORKSTORE_OWNER_NAME"
					GNUPG_OWNER_EMAIL="$PCA_GNUPG_NETWORKSTORE_OWNER_EMAIL"
					importstore="master-store"
				;;
				identity-store|component-store)
					importstore="network-store"
					add_encrypt=1
					if [ "$store" = "identity-store" ]; then
						GNUPG_OWNER_NAME="$PCA_GNUPG_IDENTITYSTORE_OWNER_NAME"
						GNUPG_OWNER_EMAIL="$PCA_GNUPG_IDENTITYSTORE_OWNER_EMAIL"
						add_auth=1
					else
						GNUPG_OWNER_NAME="$PCA_GNUPG_COMPONENTSTORE_OWNER_NAME"
						GNUPG_OWNER_EMAIL="$PCA_GNUPG_COMPONENTSTORE_OWNER_EMAIL"
					fi
				;;
			esac
			$PCA_GNUPG --homedir "$PCA_GNUPG_BASE_PATH/$store" --batch --import "$PCA_GNUPG_BASE_PATH/$importstore/archive.d/$importstore.priv.asc" >/dev/null 2>&1 && \
			echolog "$OK" "Setup: GnuPG $store $PCA_GNUPG_MASTERKEY_CERT_ALGO-cert masterkey imported successfully" || echolog "$FAILED" "Setup: Failed importing GnuPG $store $PCA_GNUPG_MASTERKEY_CERT_ALGO-cert masterkey"
		fi
	
		FPR=$($PCA_GNUPG --homedir "$PCA_GNUPG_BASE_PATH/$store" --list-options show-only-fpr-mbox --list-secret-keys 2>/dev/null | $PCA_AWK '{print $1}' | head -1)

		if [ "$store" != "root-store" ]; then
			echo -n "[0;1;34;94mAdding $store uid to masterkey...[0m"
			$PCA_GNUPG --homedir "$PCA_GNUPG_BASE_PATH/$store" --quick-add-uid "$FPR" "$GNUPG_OWNER_NAME <$GNUPG_OWNER_EMAIL>" >/dev/null 2>&1 && \
			echolog "$OK" "Setup: GnuPG $store uid added successfully" || echolog "$FAILED" "Setup: Failed adding uid to GnuPG $store"
		fi
		
		if [ "$add_sign" = "1" ]; then
			echo -n "[0;1;34;94mAdding $store $PCA_GNUPG_MASTERKEY_SIGN_ALGO-sign to masterkey...[0m"
			$PCA_GNUPG --homedir "$PCA_GNUPG_BASE_PATH/$store" --batch --passphrase '' --quick-add-key "$FPR" "$PCA_GNUPG_MASTERKEY_SIGN_ALGO" sign $PCA_GNUPG_MASTERKEY_KEY_LIFETIME >/dev/null 2>&1 && \
			echolog "$OK" "Setup: GnuPG $store $PCA_GNUPG_MASTERKEY_SIGN_ALGO-sign key added successfully" || echolog "$FAILED" "Setup: Failed adding $store $PCA_GNUPG_MASTERKEY_SIGN_ALGO-sign key"	
		fi
	
		if [ "$add_encrypt" = "1" ]; then
			echo -n "[0;1;34;94mAdding $store $PCA_GNUPG_MASTERKEY_ENCRYPT_ALGO-encrypt to masterkey...[0m"
			$PCA_GNUPG --homedir "$PCA_GNUPG_BASE_PATH/$store" --batch --passphrase '' --quick-add-key "$FPR" "$PCA_GNUPG_MASTERKEY_ENCRYPT_ALGO" encrypt $PCA_GNUPG_MASTERKEY_KEY_LIFETIME >/dev/null 2>&1 && \
			echolog "$OK" "Setup: GnuPG $store $PCA_GNUPG_MASTERKEY_ENCRYPT_ALGO-encrypt key added successfully" || echolog "$FAILED" "Setup: Failed adding $store $PCA_GNUPG_MASTERKEY_ENCRYPT_ALGO-encrypt key"	
		fi

		if [ "$add_auth" = "1" ]; then
			echo -n "[0;1;34;94mAdding $store $PCA_GNUPG_MASTERKEY_AUTHENTICATE_ALGO-auth to masterkey...[0m"
			$PCA_GNUPG --homedir "$PCA_GNUPG_BASE_PATH/$store" --batch --passphrase '' --quick-add-key "$FPR" "$PCA_GNUPG_MASTERKEY_AUTHENTICATE_ALGO" auth $PCA_GNUPG_MASTERKEY_KEY_LIFETIME >/dev/null 2>&1 && \
			echolog "$OK" "Setup: GnuPG $store $PCA_GNUPG_MASTERKEY_AUTHENTICATE_ALGO-auth key added successfully" || echolog "$FAILED" "Setup: Failed adding $store $PCA_GNUPG_MASTERKEY_AUTHENTICATE_ALGO-auth key"	
		fi
	
		if [ "$store" != "root-store" ]; then
			echo -n "[0;1;34;94mCreating $store revocation list:[0m"
			mkdir -p "$PCA_GNUPG_BASE_PATH/$store/openpgp-revocs.d" >/dev/null 2>&1
			echo -e "y\n0\n\ny\n" | $PCA_GNUPG --command-fd 0 --status-fd 2 --homedir "$PCA_GNUPG_BASE_PATH/$store" --output "$PCA_GNUPG_BASE_PATH/$store/openpgp-revocs.d/$FPR.rev" --gen-revoke "$FPR" >/dev/null 2>&1
		fi
		
		echo -n "[0;1;34;94mCopying $store revocation list to archive...[0m"
		cp "$PCA_GNUPG_BASE_PATH/$store/openpgp-revocs.d/$FPR.rev" "$PCA_GNUPG_BASE_PATH/$store/archive.d" >/dev/null 2>&1 && ln -sf "$PCA_GNUPG_BASE_PATH/$store/archive.d/$FPR.rev" "$PCA_GNUPG_BASE_PATH/$store/archive.d/$store.rev" && \
		echo $OK || echo $FAILED

		echo -n "[0;1;34;94mExporting $store public key to archive...[0m"
		$PCA_GNUPG --homedir "$PCA_GNUPG_BASE_PATH/$store" --export --armor "$FPR" > "$PCA_GNUPG_BASE_PATH/$store/archive.d/$FPR.pub.asc" 2>/dev/null && ln -sf "$PCA_GNUPG_BASE_PATH/$store/archive.d/$FPR.pub.asc" "$PCA_GNUPG_BASE_PATH/$store/archive.d/$store.pub.asc" && \
		echo $OK || echo $FAILED
	
		echo -n "[0;1;34;94mExporting $store private key to archive...[0m"
		$PCA_GNUPG --homedir "$PCA_GNUPG_BASE_PATH/$store" --export-secret-keys --armor "$FPR" > "$PCA_GNUPG_BASE_PATH/$store/archive.d/$FPR.priv.asc" 2>/dev/null && ln -sf "$PCA_GNUPG_BASE_PATH/$store/archive.d/$FPR.priv.asc" "$PCA_GNUPG_BASE_PATH/$store/archive.d/$store.priv.asc" && \
		echo $OK || echo $FAILED
	
		echo -n "[0;1;34;94mExporting $store private subkeys to archive...[0m"
		$PCA_GNUPG --homedir "$PCA_GNUPG_BASE_PATH/$store" --export-secret-subkeys --armor "$FPR" > "$PCA_GNUPG_BASE_PATH/$store/archive.d/$FPR.sub_priv.asc" 2>/dev/null && ln -sf "$PCA_GNUPG_BASE_PATH/$store/archive.d/$FPR.sub_priv.asc" "$PCA_GNUPG_BASE_PATH/$store/archive.d/$store.sub_priv.asc" && \
		echo $OK || echo $FAILED
	
		echo -n "[0;1;34;94mDeleting $store private masterkey...[0m"
		$PCA_GNUPG --homedir "$PCA_GNUPG_BASE_PATH/$store" --batch --yes --delete-secret-key "$FPR" >/dev/null 2>&1 && \
		echolog "$OK" "Setup: GnuPG $store private masterkey deleted" || echolog "$FAILED" "Setup: Failed to delete GnuPG $store private masterkey"
	
		echo -n "[0;1;34;94mRe-Importing $store private subkeys of masterkey...[0m"
		$PCA_GNUPG --homedir "$PCA_GNUPG_BASE_PATH/$store" --import "$PCA_GNUPG_BASE_PATH/$store/archive.d/$FPR.sub_priv.asc" >/dev/null 2>&1 && \
		echolog "$OK" "Setup: GnuPG $store private subkeys of masterkey re-imported" || echolog "$FAILED" "Setup: Failed to reimport GnuPG $store private subkeys of masterkey"

		echo -n "[0;1;34;94mKilling $store agent...[0m"
		[ -f "$PCA_GNUPG_BASE_PATH/$store/S.gpg-agent" ] && $PCA_GNUPG_CONNECT_AGENT --homedir "$PCA_GNUPG_BASE_PATH/$store" KILLAGENT /bye >/dev/null 2>&1
		echo $OK
	done
fi

# END OPMODE: SETUP-PGP
##########################

##########################
# OPMODE: SETUP-CA

if [ "$PCA_OPMODE" = "setup-ca" ]; then
	if [ "$PCA_FORCE" = "" ]; then
		[ -d "$PCA_BASE_PATH/ca/root-ca" ] && error 2 "Unable to start setup: Root CA path exists"
		[ -d "$PCA_BASE_PATH/ca/master-ca" ] && error 2 "Unable to start setup: Master CA path exists"
		[ -d "$PCA_BASE_PATH/ca/component-ca" ] && error 2 "Unable to start setup: Component CA path exists"
		[ -d "$PCA_BASE_PATH/ca/network-ca" ] && error 2 "Unable to start setup: Network CA path exists"
		[ -d "$PCA_BASE_PATH/ca/identity-ca" ] && error 2 "Unable to start setup: Identity CA path exists"
	fi
	
	echo -n "[0;1;34;94mSetting up Perfect-CA paths and configs...[0m"
	
	rm -rf $PCA_BASE_PATH/ca/{crl,certs,conf,requests,private} >/dev/null 2>&1
	mkdir -p $PCA_BASE_PATH/ca/{crl,certs,conf,requests,private} >/dev/null 2>&1
	chmod 775 $PCA_BASE_PATH/ca/{crl,certs,requests} >/dev/null 2>&1
	chmod 770 $PCA_BASE_PATH/ca/{conf,private} >/dev/null 2>&1
	log "Setup: created base structure of Perfect-CA"
	
	for pth in root-ca master-ca component-ca network-ca identity-ca; do
		rm -rf $PCA_BASE_PATH/ca/$pth >/dev/null 2>&1
		mkdir -p $PCA_BASE_PATH/ca/$pth/{private,db,certs} >/dev/null 2>&1
		cp /dev/null $PCA_BASE_PATH/ca/$pth/db/$pth.db >/dev/null 2>&1
		cp /dev/null $PCA_BASE_PATH/ca/$pth/db/$pth.db.attr >/dev/null 2>&1
		echo "01" > $PCA_BASE_PATH/ca/$pth/db/$pth.pem.srl
		echo "01" > $PCA_BASE_PATH/ca/$pth/db/$pth.crl.srl
		chmod -R 700 $PCA_BASE_PATH/ca/$pth/private >/dev/null 2>&1
		chmod -R 755 $PCA_BASE_PATH/ca/$pth/certs >/dev/null 2>&1
		chmod -R 775 $PCA_BASE_PATH/ca/$pth/db >/dev/null 2>&1
		log "Setup: created base structure for $pth"
	done
	
	configuration_write && echolog "$OK" "Setup: created configuration files" || echolog "$FAILED" "Setup: failed created configuration files"	
	
	echo -n "[0;1;34;94mSetting up Root-CA...[0m"
	$PCA_OPENSSL req -new -nodes \
		-config $PCA_BASE_PATH/ca/conf/root-ca.conf \
		-out $PCA_BASE_PATH/ca/requests/root-ca.csr \
		-keyout $PCA_BASE_PATH/ca/root-ca/private/root-ca.key >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -selfsign -batch \
		-config $PCA_BASE_PATH/ca/conf/root-ca.conf \
		-in $PCA_BASE_PATH/ca/requests/root-ca.csr \
		-out $PCA_BASE_PATH/ca/certs/root-ca.pem \
		-extensions root_ca_ext >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -gencrl -batch \
		-config $PCA_BASE_PATH/ca/conf/root-ca.conf \
		-out $PCA_BASE_PATH/ca/crl/root-ca.xrl >/dev/null 2>&1 && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/root-ca.pem \
		-out $PCA_BASE_PATH/ca/certs/root-ca.crt >/dev/null 2>&1 && \
	$PCA_OPENSSL crl -outform der \
		-in $PCA_BASE_PATH/ca/crl/root-ca.xrl \
		-out $PCA_BASE_PATH/ca/crl/root-ca.crl >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/root-ca.pem \
		-out $PCA_BASE_PATH/ca/certs/root-ca.p7c \
		-nocrl >/dev/null 2>&1 && \
	echolog "$OK" "Setup: created Root-CA files" || echolog "$FAILED" "Setup: failed creating Root-CA"

	echo -n "[0;1;34;94mSetting up Master-CA...[0m"
	$PCA_OPENSSL req -new -nodes \
		-config $PCA_BASE_PATH/ca/conf/master-ca.conf \
		-out $PCA_BASE_PATH/ca/requests/master-ca.csr \
		-keyout $PCA_BASE_PATH/ca/master-ca/private/master-ca.key >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -batch \
		-config $PCA_BASE_PATH/ca/conf/root-ca.conf \
		-in $PCA_BASE_PATH/ca/requests/master-ca.csr \
		-out $PCA_BASE_PATH/ca/certs/master-ca.pem \
		-extensions intermediate_ca_ext >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -gencrl -batch \
		-config $PCA_BASE_PATH/ca/conf/master-ca.conf \
		-out $PCA_BASE_PATH/ca/crl/master-ca.xrl >/dev/null 2>&1 && \
	cat $PCA_BASE_PATH/ca/certs/master-ca.pem $PCA_BASE_PATH/ca/certs/root-ca.pem > $PCA_BASE_PATH/ca/certs/master-chain.pem && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/master-ca.pem \
		-out $PCA_BASE_PATH/ca/certs/master-ca.crt >/dev/null 2>&1 && \
	$PCA_OPENSSL crl -outform der \
		-in $PCA_BASE_PATH/ca/crl/master-ca.xrl \
		-out $PCA_BASE_PATH/ca/crl/master-ca.crl >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/master-ca.pem \
		-out $PCA_BASE_PATH/ca/certs/master-ca.p7c \
		-nocrl >/dev/null 2>&1 && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/master-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/master-chain.crt >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/master-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/master-chain.p7c \
		-nocrl >/dev/null 2>&1 && \
	echolog $OK "Setup: created Master-CA files" || echolog "$FAILED" "Setup: failed creating Master-CA"

	echo -n "[0;1;34;94mSetting up Network-CA...[0m"
	$PCA_OPENSSL req -new -nodes \
		-config $PCA_BASE_PATH/ca/conf/network-ca.conf \
		-out $PCA_BASE_PATH/ca/requests/network-ca.csr \
		-keyout $PCA_BASE_PATH/ca/network-ca/private/network-ca.key >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -batch \
		-config $PCA_BASE_PATH/ca/conf/master-ca.conf \
		-in $PCA_BASE_PATH/ca/requests/network-ca.csr \
		-out $PCA_BASE_PATH/ca/certs/network-ca.pem \
		-extensions intermediate_ca_ext >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -gencrl -batch \
		-config $PCA_BASE_PATH/ca/conf/network-ca.conf \
		-out $PCA_BASE_PATH/ca/crl/network-ca.xrl >/dev/null 2>&1 && \
	cat $PCA_BASE_PATH/ca/certs/network-ca.pem $PCA_BASE_PATH/ca/certs/master-chain.pem > $PCA_BASE_PATH/ca/certs/network-chain.pem && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/network-ca.pem \
		-out $PCA_BASE_PATH/ca/certs/network-ca.crt >/dev/null 2>&1 && \
	$PCA_OPENSSL crl -outform der \
		-in $PCA_BASE_PATH/ca/crl/network-ca.xrl \
		-out $PCA_BASE_PATH/ca/crl/network-ca.crl >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/network-ca.pem \
		-out $PCA_BASE_PATH/ca/certs/network-ca.p7c \
		-nocrl >/dev/null 2>&1 && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/network-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/network-chain.crt >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/network-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/network-chain.p7c \
		-nocrl >/dev/null 2>&1 && \
	echolog $OK "Setup: created Network-CA files" || echolog "$FAILED" "Setup: failed creating Network-CA"

	echo -n "[0;1;34;94mSetting up Identity-CA...[0m"
	$PCA_OPENSSL req -new -nodes \
		-config $PCA_BASE_PATH/ca/conf/identity-ca.conf \
		-out $PCA_BASE_PATH/ca/requests/identity-ca.csr \
		-keyout $PCA_BASE_PATH/ca/identity-ca/private/identity-ca.key >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -batch \
		-config $PCA_BASE_PATH/ca/conf/network-ca.conf \
		-in $PCA_BASE_PATH/ca/requests/identity-ca.csr \
		-out $PCA_BASE_PATH/ca/certs/identity-ca.pem \
		-extensions signing_ca_ext >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -gencrl -batch \
		-config $PCA_BASE_PATH/ca/conf/identity-ca.conf \
		-out $PCA_BASE_PATH/ca/crl/identity-ca.xrl >/dev/null 2>&1 && \
	cat $PCA_BASE_PATH/ca/certs/identity-ca.pem $PCA_BASE_PATH/ca/certs/network-chain.pem > $PCA_BASE_PATH/ca/certs/identity-chain.pem && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/identity-ca.pem \
		-out $PCA_BASE_PATH/ca/certs/identity-ca.crt >/dev/null 2>&1 && \
	$PCA_OPENSSL crl -outform der \
		-in $PCA_BASE_PATH/ca/crl/identity-ca.xrl \
		-out $PCA_BASE_PATH/ca/crl/identity-ca.crl >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/identity-ca.pem \
		-out $PCA_BASE_PATH/ca/certs/identity-ca.p7c \
		-nocrl >/dev/null 2>&1 && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/identity-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/identity-chain.crt >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/identity-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/identity-chain.p7c \
		-nocrl >/dev/null 2>&1 && \
	echolog $OK "Setup: created Identity-CA files" || echolog "$FAILED" "Setup: failed creating Identity-CA"

	echo -n "[0;1;34;94mSetting up Component-CA...[0m"
	$PCA_OPENSSL req -new -nodes \
		-config $PCA_BASE_PATH/ca/conf/component-ca.conf \
		-out $PCA_BASE_PATH/ca/requests/component-ca.csr \
		-keyout $PCA_BASE_PATH/ca/component-ca/private/component-ca.key >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -batch \
		-config $PCA_BASE_PATH/ca/conf/network-ca.conf \
		-in $PCA_BASE_PATH/ca/requests/component-ca.csr \
		-out $PCA_BASE_PATH/ca/certs/component-ca.pem \
		-extensions signing_ca_ext >/dev/null 2>&1 && \
	$PCA_OPENSSL ca -gencrl -batch \
		-config $PCA_BASE_PATH/ca/conf/component-ca.conf \
		-out $PCA_BASE_PATH/ca/crl/component-ca.xrl >/dev/null 2>&1 && \
	cat $PCA_BASE_PATH/ca/certs/component-ca.pem $PCA_BASE_PATH/ca/certs/network-chain.pem > $PCA_BASE_PATH/ca/certs/component-chain.pem && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/component-ca.pem \
		-out $PCA_BASE_PATH/ca/certs/component-ca.crt >/dev/null 2>&1 && \
	$PCA_OPENSSL crl -outform der \
		-in $PCA_BASE_PATH/ca/crl/component-ca.xrl \
		-out $PCA_BASE_PATH/ca/crl/component-ca.crl >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/component-ca.pem \
		-out $PCA_BASE_PATH/ca/certs/component-ca.p7c \
		-nocrl >/dev/null 2>&1 && \
	$PCA_OPENSSL x509 -outform der \
		-in $PCA_BASE_PATH/ca/certs/component-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/component-chain.crt >/dev/null 2>&1 && \
	$PCA_OPENSSL crl2pkcs7 -outform der \
		-certfile $PCA_BASE_PATH/ca/certs/component-chain.pem \
		-out $PCA_BASE_PATH/ca/certs/component-chain.p7c \
		-nocrl >/dev/null 2>&1 && \
	echolog $OK "Setup: created Component-CA files" || echolog "$FAILED" "Setup: failed creating Component-CA"
	
	echo -n "[0;1;34;94mExecuting rehash...[0m"
	for pth in root-ca master-ca network-ca component-ca identity-ca; do
		hash=`$PCA_OPENSSL x509 -hash -noout -in $PCA_BASE_PATH/ca/certs/$pth.pem 2>/dev/null`
		ln -sf $PCA_BASE_PATH/ca/certs/$pth.pem $PCA_BASE_PATH/ca/certs/$hash.0 >/dev/null 2>&1
		ln -sf $PCA_BASE_PATH/ca/certs/$pth.pem $PCA_SSL_CERTS/PCA_$pth.pem >/dev/null 2>&1
		ln -sf $PCA_SSL_CERTS/PCA_$pth.pem $PCA_SSL_CERTS/$hash.0 >/dev/null 2>&1
		hash=`$PCA_OPENSSL crl -hash -noout -in $PCA_BASE_PATH/ca/crl/$pth.xrl 2>/dev/null`
		ln -sf $PCA_BASE_PATH/ca/crl/$pth.xrl $PCA_BASE_PATH/ca/crl/$hash.0 >/dev/null 2>&1
		ln -sf $PCA_BASE_PATH/ca/crl/$pth.xrl $PCA_SSL_CERTS/PCA_$pth.crl >/dev/null 2>&1
		ln -sf $PCA_SSL_CERTS/PCA_$pth.crl $PCA_SSL_CERTS/$hash.0 >/dev/null 2>&1
		log "Setup: executed rehash of $pth"
	done
	echo $OK
			
	echo -e "\n[0;1;34;94mPerfect-CA has been setup.[0m"
	echo -e "[0;1;34;94mYou can now backup your Root-CA key[0m"
	echo -e "[0;1;34;94mfrom $PCA_BASE_PATH/ca/root-ca/private/root-ca.key[0m"
	echo -e "[0;1;34;94mand safely delete it (eg, with shred),[0m"
	echo -e "[0;1;34;94mas this is your offline root CA's key.[0m"
	
	echo -e "\n[0;1;34;94mPlease create your OCSP signing certificates\nand the online-responder services right now, with the following commands:[0m"
	for pth in root-ca master-ca network-ca component-ca identity-ca; do
		echo "# $0 --create-certificate --skip-pkcs12 --$pth --ocspsign --filename ocsp-$pth"
		echo "# $0 headless --create-ocsp-systemd-service --$pth > /lib/systemd/system/$PCA_PROGNAME-$pth-ocsp.service"
	done
	echo "# systemctl daemon-reload"

	echo -e "\n[0;1;34;94mAfter daemon reload is done, you can enable and start your online-responders, with:[0m"
	for pth in root-ca master-ca network-ca component-ca identity-ca; do
		echo "# systemctl enable $PCA_PROGNAME-$pth-ocsp"
		echo "# systemctl start $PCA_PROGNAME-$pth-ocsp"
	done

	echo -e "\n[0;1;34;94mThan, create and install the CA maintainance crontab, using this command:[0m"
	echo "# $0 headless --create-crontab > /etc/cron.d/perfect-ca"

	echo -e "\n[0;1;34;94mAfter this you can create your first EV certificate, using this command:[0m"
	hostname=`hostname -f`
	echo "# $0 --create-certificate --ev --export-san \"DNS:$hostname\" --filename $hostname"
	echo ""

	log "Setup: done"
	exit
fi
                                                                      
# END OPMODE: SETUP-CA
##########################

##########################
# OPMODE: CREATE-REQUEST

if [ "$PCA_OPMODE" = "create-request" -o "$PCA_OPMODE" = "create-certificate" ]; then
	[ "$PCA_FILENAME" = "" ] && error 9 "Missing filename for request"
	
	config=""
	opts=""
	
	[ "$PCA_SUBJECT" = "" ] || opts="-subj '$PCA_SUBJECT' $opts"
	[ "$PCA_NODES" = "" ] || opts="-nodes $opts"
	[ "$PCA_PASSWORD" = "" ] || opts="-passin 'pass:$PCA_PASSWORD' -passout 'pass:$PCA_PASSWORD' $opts"
	
	case $PCA_USE_CONFIG in
		identity|windows|ev|server|client|timestamp|smime|encryption|ocspsign)
			config="$PCA_BASE_PATH/ca/conf/$PCA_USE_CONFIG.conf"
		;;
		*)
			error 8 "Invalid configuration type requested"
		;;
	esac
	
	/bin/bash -c "$PCA_OPENSSL req -new \
		-config $config $opts \
		-out $PCA_BASE_PATH/ca/requests/$PCA_FILENAME.csr \
		-keyout $PCA_BASE_PATH/ca/private/$PCA_FILENAME.key" || error 7 "Create CSR failed"
				
	[ "$PCA_OPMODE" = "create-certificate" ] || exit
fi

# END OPMODE: CREATE-REQ..
##########################

##########################
# OPMODE: SIGN-REQUEST

if [ "$PCA_OPMODE" = "sign-request" -o "$PCA_OPMODE" = "create-certificate" ]; then
	[ "$PCA_FILENAME" = "" ] && error 9 "Missing filename for request"
	
	config=""
	ext=""
	days=""
	opts="" 
	
	case $PCA_USE_CONFIG in
		ocspsign)
			config="$PCA_BASE_PATH/ca/conf/$PCA_SELECTED_CA.conf"
			[ -f "$config" ] || error 6 "Unable to find selected CA"
			ext="${PCA_USE_CONFIG}_ext"
			
			case $PCA_SELECTED_CA in
				root-ca)
					days="$PCA_ROOTCA_VALID_DAYS"
				;;
				master-ca)
					days="$PCA_MASTERCA_VALID_DAYS"
				;;
				network-ca)
					days="$PCA_NETWORKCA_VALID_DAYS"
				;;
				component-ca)
					days="$PCA_COMPONENTCA_VALID_DAYS"
				;;
				identity-ca)
					days="$PCA_IDENTITYCA_VALID_DAYS"
				;;
				*)
					error 7 "Invalid CA selected"
				;;
			esac
		;;
		ev|server|client|timestamp)
			config="$PCA_BASE_PATH/ca/conf/component-ca.conf"
			ext="${PCA_USE_CONFIG}_ext"
			days="$PCA_COMPONENTCA_VALID_DAYS"
		;;
		identity|windows|encryption|smime)
			config="$PCA_BASE_PATH/ca/conf/identity-ca.conf"
			ext="${PCA_USE_CONFIG}_ext"
			days="$PCA_IDENTITYCA_VALID_DAYS"
		;;
		signing_ca)
			config="$PCA_BASE_PATH/ca/conf/network-ca.conf"
			ext="${PCA_USE_CONFIG}_ext"
			days="$PCA_NETWORKCA_VALID_DAYS"
		;;
		intermediate_ca)
			config="$PCA_BASE_PATH/ca/conf/$PCA_SELECTED_CA.conf"
			[ -f "$config" ] || error 6 "Unable to find selected CA"
			ext="${PCA_USE_CONFIG}_ext"
			
			case $PCA_SELECTED_CA in
				root-ca)
					days="$PCA_ROOTCA_VALID_DAYS"
				;;
				master-ca)
					days="$PCA_MASTERCA_VALID_DAYS"
				;;
				network-ca)
					days="$PCA_NETWORKCA_VALID_DAYS"
				;;
				*)
					error 7 "Invalid CA selected"
				;;
			esac
		;;
		master_ca|root_ca)
			config="$PCA_BASE_PATH/ca/conf/$PCA_USE_CONFIG.conf"
			ext="${PCA_USE_CONFIG}_ext"
			[ "$PCA_USE_CONFIG" = "root_ca" ] && days="$PCA_ROOTCA_VALID_DAYS" || days="$PCA_MASTERCA_VALID_DAYS"
		;;
		*)
			error 8 "Invalid configuration type requested"
		;;
	esac
	
	[ "$PCA_DAYS" = "" ] || days="$PCA_DAYS"
	[ "$PCA_OPMODE" = "create-certificate" ] && opts="-batch $opts"
	
	/bin/bash -c "$PCA_OPENSSL ca \
		-config $config $opts \
		-in $PCA_BASE_PATH/ca/requests/$PCA_FILENAME.csr \
		-out $PCA_BASE_PATH/ca/certs/$PCA_FILENAME.pem \
		-extensions $ext -days $days" && log "Sign-Request using config $PCA_USE_CONFIG for $PCA_FILENAME.pem succeeded" || error 7 "Unable to sign request for $PCA_USE_CONFIG at $PCA_FILENAME.csr"
		
	[ "$PCA_OPMODE" = "create-certificate" ] || exit
fi

# END OPMODE: SIGN-REQ....
##########################

##########################
# OPMODE: PKCS12

if [ "$PCA_OPMODE" = "pkcs12" -o "$PCA_OPMODE" = "create-certificate" ]; then
	[ "$PCA_OPMODE" = "create-certificate" -a "$PCA_SKIP_PKCS12" = "1" ] && exit
	
	[ "$PCA_FILENAME" = "" ] && error 9 "Missing filename for request"
	
	chain=""
	opts=""
	
	case $PCA_USE_CONFIG in
		ocspsign)
			chain=""
		;;
		ev|server|client|timestamp)
			chain="component-chain.pem"
			opts="-caname '$PCA_COMPONENTCA_ORG_UNIT_NAME' -caname '$PCA_NETWORKCA_ORG_UNIT_NAME' -caname '$PCA_MASTERCA_ORG_UNIT_NAME' -caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
		;;
		identity|windows|encryption|smime)
			chain="identity-chain.pem"
			opts="-caname '$PCA_IDENTITYCA_ORG_UNIT_NAME' -caname '$PCA_NETWORKCA_ORG_UNIT_NAME' -caname '$PCA_MASTERCA_ORG_UNIT_NAME' -caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
		;;
		signing_ca)
			chain="network-chain.pem"
			opts="-caname '$PCA_NETWORKCA_ORG_UNIT_NAME' -caname '$PCA_MASTERCA_ORG_UNIT_NAME' -caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
		;;
		intermediate_ca)			
			case $PCA_SELECTED_CA in
				root_ca)
					chain="root-ca.pem"
					opts="-caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
				;;
				master_ca)
					chain="master-chain.pem"
					opts="-caname '$PCA_MASTERCA_ORG_UNIT_NAME' -caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
				;;
				network_ca)
					chain="network-chain.pem"
					opts="-caname '$PCA_NETWORKCA_ORG_UNIT_NAME' -caname '$PCA_MASTERCA_ORG_UNIT_NAME' -caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
				;;
				*)
					error 7 "Invalid CA selected"
				;;
			esac
		;;
		master_ca)
			chain="master-chain.pem"
			opts="-caname '$PCA_MASTERCA_ORG_UNIT_NAME' -caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
		;;
		root_ca)
			chain="root-ca.pem"
			opts="-caname '$PCA_ROOTCA_ORG_UNIT_NAME'"
		;;
		*)
			error 8 "Invalid configuration type requested"
		;;
	esac
	
	[ "$PCA_NAME" = "" ] || opts="-name '$PCA_NAME' $opts"
	[ "$PCA_NODES" = "" ] || opts="-nodes $opts"
	[ "$PCA_PASSWORD" = "" ] || opts="-passout 'pass:$PCA_PASSWORD' -passin 'pass:$PCA_PASSWORD' $opts"
	
	[ "$chain" != "" ] && /bin/bash -c "$PCA_OPENSSL pkcs12 -export $opts \
		-inkey $PCA_BASE_PATH/ca/private/$PCA_FILENAME.key \
		-in $PCA_BASE_PATH/ca/certs/$PCA_FILENAME.pem \
		-certfile $PCA_BASE_PATH/ca/certs/$chain \
		-out $PCA_FILENAME.p12" && log "Create PKCS12 using config $PCA_USE_CONFIG for $PCA_FILENAME.p12 succeeded" || error 7 "Unable to create PKCS12 for $PCA_USE_CONFIG at $PCA_FILENAME.pem"
	exit
fi

# END OPMODE: PKCS12
##########################

##########################
# OPMODE: REVOKE

if [ "$PCA_OPMODE" = "revoke" ]; then
	[ "$PCA_FILENAME" = "" ] && error 9 "Missing filename for request"
			
	$PCA_OPENSSL ca \
		-config $PCA_BASE_PATH/ca/conf/$PCA_SELECTED_CA.conf \
		-revoke $PCA_BASE_PATH/ca/$PCA_SELECTED_CA/certs/$PCA_FILENAME.pem \
		-crl_reason $PCA_CRL_REASON && log "Revoked $PCA_FILENAME.pem for reason: $PCA_CRL_REASON" || error 8 "Unable to revoke $PCA_FILENAME.pem for reason: $PCA_CRL_REASON"
	exit
fi

# END OPMODE: REVOKE
##########################

##########################
# OPMODE: RENEW-CA

if [ "$PCA_OPMODE" = "renew-ca" ]; then
	dateNow=`date +%s`
	
	renewRootCA=""
	renewMasterCA=""
	renewNetworkCA=""
	renewComponentCA=""
	renewIdentityCA=""

	updateMasterCA=""
	updateNetworkCA=""
	updateComponentCA=""
	updateIdentityCA=""
	
	rehash=""

	if [ "$PCA_FORCE" = "" ]; then
		for pth in root-ca master-ca network-ca component-ca identity-ca; do
			echo -n "[0;1;34;94mChecking validity of $pth...[0m"
		
			dateCert=`openssl x509 -in $PCA_BASE_PATH/ca/certs/$pth.pem -noout -dates | $PCA_GREP notAfter | cut -d = -f2`
			dateCertTS=`date -d "${dateCert}" +%s`
			certValid=$(($dateCertTS > $dateNow))
			graceTime=$((86400 * $PCA_GRACEDAYS))
			certGraceTime=$((($dateCertTS - $graceTime) > $dateNow))
			
			[ "$PCA_SKIP_GRACE" = "1" ] && certGraceTime="1"
			
			if [ "$certValid" = "1" -a "$certGraceTime" = "1" ]; then
				echolog "$OK" "Certificate authority $pth is still valid"
			else
				echolog "$FAILED" "Certificate authority $pth is no longer valid"
				
				case $pth in
					root-ca)
						renewRootCA="1"
						updateMasterCA="1"
						updateNetworkCA="1"
						updateComponentCA="1"
						updateIdentityCA="1"
						rehash="1"
					;;
					master-ca)
						renewMasterCA="1"
						updateMasterCA="1"
						updateNetworkCA="1"
						updateComponentCA="1"
						updateIdentityCA="1"
						rehash="1"
					;;
					network-ca)
						renewNetworkCA="1"
						updateNetworkCA="1"
						updateComponentCA="1"
						updateIdentityCA="1"
						rehash="1"
					;;
					component-ca)
						renewComponentCA="1"
						updateComponentCA="1"
						rehash="1"
					;;
					identity-ca)
						renewIdentityCA="1"
						updateIdentityCA="1"
						rehash="1"
					;;
				esac
			fi
		done
	else
		renewRootCA="1"
		renewMasterCA="1"
		renewNetworkCA="1"
		renewComponentCA="1"
		renewIdentityCA="1"
	
		updateMasterCA="1"
		updateNetworkCA="1"
		updateComponentCA="1"
		updateIdentityCA="1"
		
		rehash="1"	
	fi
		
	if [ "$renewRootCA" = "1" ]; then
		echo -n "[0;1;34;94mRenewing certificate of Root-CA...[0m"
		$PCA_OPENSSL ca -selfsign -batch \
			-config $PCA_BASE_PATH/ca/conf/root-ca.conf \
			-in $PCA_BASE_PATH/ca/requests/root-ca.csr \
			-out $PCA_BASE_PATH/ca/certs/root-ca.pem \
			-extensions root_ca_ext >/dev/null 2>&1 && \
		$PCA_OPENSSL ca -gencrl -batch \
			-config $PCA_BASE_PATH/ca/conf/root-ca.conf \
			-out $PCA_BASE_PATH/ca/crl/root-ca.xrl >/dev/null 2>&1 && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/root-ca.pem \
			-out $PCA_BASE_PATH/ca/certs/root-ca.crt >/dev/null 2>&1 && \
		$PCA_OPENSSL crl -outform der \
			-in $PCA_BASE_PATH/ca/crl/root-ca.xrl \
			-out $PCA_BASE_PATH/ca/crl/root-ca.crl >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/root-ca.pem \
			-out $PCA_BASE_PATH/ca/certs/root-ca.p7c \
			-nocrl >/dev/null 2>&1 && \
		echolog "$OK" "Root-CA has been renewed" || echolog "$FAILED" "Failed renewing Root-CA"
	fi
	
	if [ "$renewMasterCA" = "1" ]; then
		echo -n "[0;1;34;94mRenewing certificate of Master-CA...[0m"
		$PCA_OPENSSL ca -batch \
			-config $PCA_BASE_PATH/ca/conf/root-ca.conf \
			-in $PCA_BASE_PATH/ca/requests/master-ca.csr \
			-out $PCA_BASE_PATH/ca/certs/master-ca.pem \
			-extensions intermediate_ca_ext >/dev/null 2>&1 && \
		$PCA_OPENSSL ca -gencrl -batch \
			-config $PCA_BASE_PATH/ca/conf/master-ca.conf \
			-out $PCA_BASE_PATH/ca/crl/master-ca.xrl >/dev/null 2>&1 && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/master-ca.pem \
			-out $PCA_BASE_PATH/ca/certs/master-ca.crt >/dev/null 2>&1 && \
		$PCA_OPENSSL crl -outform der \
			-in $PCA_BASE_PATH/ca/crl/master-ca.xrl \
			-out $PCA_BASE_PATH/ca/crl/master-ca.crl >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/master-ca.pem \
			-out $PCA_BASE_PATH/ca/certs/master-ca.p7c \
			-nocrl >/dev/null 2>&1 && \
		echolog "$OK" "Master-CA has been renewed" || echolog "$FAILED" "Failed renewing Master-CA"	
	fi
				
	if [ "$renewNetworkCA" = "1" ]; then
		echo -n "[0;1;34;94mRenewing certificate of Network-CA...[0m"
		$PCA_OPENSSL ca -batch \
			-config $PCA_BASE_PATH/ca/conf/master-ca.conf \
			-in $PCA_BASE_PATH/ca/requests/network-ca.csr \
			-out $PCA_BASE_PATH/ca/certs/network-ca.pem \
			-extensions intermediate_ca_ext >/dev/null 2>&1 && \
		$PCA_OPENSSL ca -gencrl -batch \
			-config $PCA_BASE_PATH/ca/conf/network-ca.conf \
			-out $PCA_BASE_PATH/ca/crl/network-ca.xrl >/dev/null 2>&1 && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/network-ca.pem \
			-out $PCA_BASE_PATH/ca/certs/network-ca.crt >/dev/null 2>&1 && \
		$PCA_OPENSSL crl -outform der \
			-in $PCA_BASE_PATH/ca/crl/network-ca.xrl \
			-out $PCA_BASE_PATH/ca/crl/network-ca.crl >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/network-ca.pem \
			-out $PCA_BASE_PATH/ca/certs/network-ca.p7c \
			-nocrl >/dev/null 2>&1 && \
		echolog "$OK" "Network-CA has been renewed" || echolog "$FAILED" "Failed renewing Network-CA"
	fi

	if [ "$renewIdentityCA" = "1" ]; then
		echo -n "[0;1;34;94mRenewing certificate of Identity-CA...[0m"
		$PCA_OPENSSL ca -batch \
			-config $PCA_BASE_PATH/ca/conf/network-ca.conf \
			-in $PCA_BASE_PATH/ca/requests/identity-ca.csr \
			-out $PCA_BASE_PATH/ca/certs/identity-ca.pem \
			-extensions signing_ca_ext >/dev/null 2>&1 && \
		$PCA_OPENSSL ca -gencrl -batch \
			-config $PCA_BASE_PATH/ca/conf/identity-ca.conf \
			-out $PCA_BASE_PATH/ca/crl/identity-ca.xrl >/dev/null 2>&1 && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/identity-ca.pem \
			-out $PCA_BASE_PATH/ca/certs/identity-ca.crt >/dev/null 2>&1 && \
		$PCA_OPENSSL crl -outform der \
			-in $PCA_BASE_PATH/ca/crl/identity-ca.xrl \
			-out $PCA_BASE_PATH/ca/crl/identity-ca.crl >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/identity-ca.pem \
			-out $PCA_BASE_PATH/ca/certs/identity-ca.p7c \
			-nocrl >/dev/null 2>&1 && \
		echolog "$OK" "Identity-CA has been renewed" || echolog "$FAILED" "Failed renewing Identity-CA"
	fi

	if [ "$renewComponentCA" = "1" ]; then
		echo -n "[0;1;34;94mRenewing certificate of Component-CA...[0m"
		$PCA_OPENSSL ca -batch \
			-config $PCA_BASE_PATH/ca/conf/network-ca.conf \
			-in $PCA_BASE_PATH/ca/requests/component-ca.csr \
			-out $PCA_BASE_PATH/ca/certs/component-ca.pem \
			-extensions signing_ca_ext >/dev/null 2>&1 && \
		$PCA_OPENSSL ca -gencrl -batch \
			-config $PCA_BASE_PATH/ca/conf/component-ca.conf \
			-out $PCA_BASE_PATH/ca/crl/component-ca.xrl >/dev/null 2>&1 && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/component-ca.pem \
			-out $PCA_BASE_PATH/ca/certs/component-ca.crt >/dev/null 2>&1 && \
		$PCA_OPENSSL crl -outform der \
			-in $PCA_BASE_PATH/ca/crl/component-ca.xrl \
			-out $PCA_BASE_PATH/ca/crl/component-ca.crl >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/component-ca.pem \
			-out $PCA_BASE_PATH/ca/certs/component-ca.p7c \
			-nocrl >/dev/null 2>&1 && \
		echolog "$OK" "Component-CA has been renewed" || echolog "$FAILED" "Failed renewing Component-CA"
	fi
	
	if [ "$updateMasterCA" = "1" ]; then
		echo -n "[0;1;34;94mUpdating chain for Master-CA...[0m"
		cat $PCA_BASE_PATH/ca/certs/master-ca.pem $PCA_BASE_PATH/ca/certs/root-ca.pem > $PCA_BASE_PATH/ca/certs/master-chain.pem && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/master-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/master-chain.crt >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/master-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/master-chain.p7c \
			-nocrl >/dev/null 2>&1 && \
		echolog "$OK" "Master-CA-Chain has been updated" || echolog "$FAILED" "Failed updating Master-CA-Chain"	
	fi
	
	if [ "$updateNetworkCA" = "1" ]; then
		echo -n "[0;1;34;94mUpdating chain for Network-CA...[0m"
		cat $PCA_BASE_PATH/ca/certs/network-ca.pem $PCA_BASE_PATH/ca/certs/master-chain.pem > $PCA_BASE_PATH/ca/certs/network-chain.pem && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/network-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/network-chain.crt >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/network-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/network-chain.p7c \
			-nocrl >/dev/null 2>&1 && \
		echolog "$OK" "Network-CA-Chain has been updated" || echolog "$FAILED" "Failed updating Network-CA-Chain"
	fi

	if [ "$updateIdentityCA" = "1" ]; then
		echo -n "[0;1;34;94mUpdating chain for Identity-CA...[0m"
		cat $PCA_BASE_PATH/ca/certs/identity-ca.pem $PCA_BASE_PATH/ca/certs/network-chain.pem > $PCA_BASE_PATH/ca/certs/identity-chain.pem && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/identity-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/identity-chain.crt >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/identity-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/identity-chain.p7c \
			-nocrl >/dev/null 2>&1 && \
		echolog "$OK" "Identity-CA-Chain has been updated" || echolog "$FAILED" "Failed updating Identity-CA-Chain"
	fi
	
	if [ "$updateComponentCA" = "1" ]; then
		echo -n "[0;1;34;94mUpdating chain for Component-CA...[0m"
		cat $PCA_BASE_PATH/ca/certs/component-ca.pem $PCA_BASE_PATH/ca/certs/network-chain.pem > $PCA_BASE_PATH/ca/certs/component-chain.pem && \
		$PCA_OPENSSL x509 -outform der \
			-in $PCA_BASE_PATH/ca/certs/component-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/component-chain.crt >/dev/null 2>&1 && \
		$PCA_OPENSSL crl2pkcs7 -outform der \
			-certfile $PCA_BASE_PATH/ca/certs/component-chain.pem \
			-out $PCA_BASE_PATH/ca/certs/component-chain.p7c \
			-nocrl >/dev/null 2>&1 && \
		echolog "$OK" "Component-CA-Chain has been updated" || echolog "$FAILED" "Failed updating Component-CA-Chain"
	fi

	if [ "$rehash" = "1" ]; then
		echo -n "[0;1;34;94mExecuting rehash...[0m"
		find $PCA_BASE_PATH/ca/certs -type l -name "*.0" -exec unlink {} \;
		find $PCA_BASE_PATH/ca/crl -type l -name "*.0" -exec unlink {} \;
		for pth in root-ca master-ca network-ca component-ca identity-ca; do
			hash=`$PCA_OPENSSL x509 -hash -noout -in $PCA_BASE_PATH/ca/certs/$pth.pem 2>/dev/null`
			ln -sf $PCA_BASE_PATH/ca/certs/$pth.pem $PCA_BASE_PATH/ca/certs/$hash.0 >/dev/null 2>&1
			ln -sf $PCA_BASE_PATH/ca/certs/$pth.pem $PCA_SSL_CERTS/PCA_$pth.pem >/dev/null 2>&1
			ln -sf $PCA_SSL_CERTS/PCA_$pth.pem $PCA_SSL_CERTS/$hash.0 >/dev/null 2>&1
			hash=`$PCA_OPENSSL crl -hash -noout -in $PCA_BASE_PATH/ca/crl/$pth.xrl 2>/dev/null`
			ln -sf $PCA_BASE_PATH/ca/crl/$pth.xrl $PCA_BASE_PATH/ca/crl/$hash.0 >/dev/null 2>&1
			ln -sf $PCA_BASE_PATH/ca/crl/$pth.xrl $PCA_SSL_CERTS/PCA_$pth.crl >/dev/null 2>&1
			ln -sf $PCA_SSL_CERTS/PCA_$pth.crl $PCA_SSL_CERTS/$hash.0 >/dev/null 2>&1
		done
		echolog "$OK" "Rehashing of renewed and updated CAs done"
	fi
			
	exit
fi

# END OPMODE: RENEW-CA
##########################

##########################
# OPMODE: VALIDATE

if [ "$PCA_OPMODE" = "validate" ]; then
	[ "$PCA_FILENAME" = "" ] && error 9 "Missing filename for request"
			
	$PCA_OPENSSL verify -CApath $PCA_BASE_PATH/ca/certs $PCA_FILENAME

	exit $?
fi

# END OPMODE: VALIDATE
##########################

##########################
# OPMODE: OCSP-SERVER

if [ "$PCA_OPMODE" = "ocsp-server" ]; then			
	[ "$PCA_OCSP_PORT" = "" ] && error 3 "Missing OCSP server port"
	[ "$PCA_FILENAME" = "" ] && error 4 "Missing filename prefix for OCSP rsigner certificate and private key"
	
	OCSP_MULTI=6
	OCSP_TIMEOUT=10
	OCSP_VERIFY_DEPTH=4
	OCSP_NUM_REQUESTS=6
	OCSP_NUM_MINUTES=6
	
	case $PCA_SELECTED_CA in
		root-ca)
			OCSP_MULTI=2
			OCSP_TIMEOUT=10
			OCSP_VERIFY_DEPTH=1
			OCSP_NUM_REQUESTS=2
			OCSP_NUM_MINUTES=240
		;;
		master-ca)
			OCSP_MULTI=2
			OCSP_TIMEOUT=10
			OCSP_VERIFY_DEPTH=2
			OCSP_NUM_REQUESTS=2
			OCSP_NUM_MINUTES=180
		;;
		network-ca)
			OCSP_MULTI=2
			OCSP_TIMEOUT=10
			OCSP_VERIFY_DEPTH=3
			OCSP_NUM_REQUESTS=2
			OCSP_NUM_MINUTES=120
		;;
		component-ca|identity-ca)
			OCSP_MULTI=6
			OCSP_TIMEOUT=10
			OCSP_VERIFY_DEPTH=4
			OCSP_NUM_REQUESTS=6
			OCSP_NUM_MINUTES=60
		;;
	esac
	
	case $PCA_SELECTED_CA in
		root-ca|master-ca|network-ca|component-ca|identity-ca)
			log "Bringing up online responder for $PCA_SELECTED_CA"
			$PCA_OPENSSL ocsp \
				-index $PCA_BASE_PATH/ca/$PCA_SELECTED_CA/db/$PCA_SELECTED_CA.db \
				-port $PCA_OCSP_PORT \
				-rsigner $PCA_BASE_PATH/ca/certs/$PCA_FILENAME.pem \
				-rkey $PCA_BASE_PATH/ca/private/$PCA_FILENAME.key \
				-CA $PCA_BASE_PATH/ca/certs/$PCA_SELECTED_CA.pem \
				-ignore_err -multi $OCSP_MULTI -timeout $OCSP_TIMEOUT \
				-verify_depth $OCSP_VERIFY_DEPTH -nrequest $OCSP_NUM_REQUESTS \
				-nmin $OCSP_NUM_MINUTES -verify_hostname $PCA_BASE_OCSP_HOSTNAME
		;;
		*)
			error 7 "Invalid CA selected for OCSP start"
		;;
	esac
	
	exit $?
fi

# END OPMODE: OCSP-SERVER
##########################

##########################
# OPMODE: OCSP-VERIFY

if [ "$PCA_OPMODE" = "ocsp-verify" ]; then			
	[ "$PCA_OCSP_PORT" = "" ] && error 3 "Missing OCSP server port"
	[ "$PCA_FILENAME" = "" ] && error 4 "Missing filename for certificate to check against OCSP"
	
	case $PCA_SELECTED_CA in
		root-ca|master-ca|network-ca|component-ca|identity-ca)
			$PCA_OPENSSL ocsp \
				-CAfile $PCA_BASE_PATH/ca/certs/$PCA_SELECTED_CA.pem \
				-issuer $PCA_BASE_PATH/ca/certs/$PCA_SELECTED_CA.pem \
				-cert $PCA_FILENAME \
				-url http://localhost:$PCA_OCSP_PORT \
				-resp_text
		;;
		*)
			error 7 "Invalid CA selected"
		;;
	esac
	
	exit $?
fi

# END OPMODE: OCSP-VERIFY
##########################

##########################
# OPMODE: EXPORT-CHAIN

if [ "$PCA_OPMODE" = "export-chain" ]; then
	[ "$PCA_FILENAME" = "" ] && error 9 "Missing filename for export"
	[ -e "$PCA_FILENAME" -a "$PCA_FORCE" = "" ] && error 8 "File $PCA_FILENAME exists. Use --force to overwrite."

	withroot=""
	
	[ "$PCA_USE_CONFIG" = "root_ca" ] && withroot="root-ca"

	echo -n "[0;1;34;94mExporting chain of $PCA_SELECTED_CA...[0m"
	case $PCA_SELECTED_CA in
		master-ca)
			echo -n "" > $PCA_FILENAME
			
			for ca in $PCA_SELECTED_CA $withroot; do
				[ "$ca" = "" ] || $PCA_OPENSSL x509 -in $PCA_BASE_PATH/ca/certs/$ca.pem >> $PCA_FILENAME
			done
			
			echo $OK
		;;
		network-ca)
			echo -n "" > $PCA_FILENAME
			
			for ca in $PCA_SELECTED_CA master-ca $withroot; do
				[ "$ca" = "" ] || $PCA_OPENSSL x509 -in $PCA_BASE_PATH/ca/certs/$ca.pem >> $PCA_FILENAME
			done
			
			echo $OK
		;;
		identity-ca|component-ca)
			echo -n "" > $PCA_FILENAME
			
			for ca in $PCA_SELECTED_CA network-ca master-ca $withroot; do
				[ "$ca" = "" ] || $PCA_OPENSSL x509 -in $PCA_BASE_PATH/ca/certs/$ca.pem >> $PCA_FILENAME
			done
			
			echo $OK
		;;
		*)
			echo $FAILED
			error 7 "Unknown or invalid CA selected for chain export"
		;;
	esac
	
	log "Certificate authority chain for $PCA_SELECTED_CA exported"

	exit
fi

# END OPMODE: EXPORT-CHAIN
##########################

##########################
# OPMODE: BACKUP

if [ "$PCA_OPMODE" = "backup" ]; then
	echo -n "[0;1;34;94mBacking up certificate authority...[0m"
	mkdir -p $PCA_BACKUP_PATH >/dev/null 2>&1

	[ -d "$PCA_BACKUP_PATH" ] || error 5 "$PCA_BACKUP_PATH not accessible"
	[ "$PCA_BACKUP_KEY" != "" ] || error 6 "Missing backup key"
	
	tmp=`$PCA_MKTEMP -d -q --suffix .pca`
	[ "$tmp" = "" ] && error 5 "Unable to create tmp directory"

	backup_tmpname=`echo "${0}_$(date +'%s')" | $PCA_OPENSSL sha1 | $PCA_AWK '{print $2}'`
	backup_tmpfile="$tmp/pca_${backup_tmpname}.tar"
	backup_filename="$PCA_BACKUP_PATH/pca_$(date +'%Y%m%d').bak"
	
	if [ "$PCA_FORCE" = "" ]; then
		[ -f "$backup_filename" ] && error 7 "Backup file exists. Use --force to overwrite it."
	fi

	$PCA_TAR -C "$PCA_BASE_PATH" -cf "$backup_tmpfile" . >/dev/null 2>&1 && \
	$PCA_OPENSSL aes-256-cbc -a -salt -in "$backup_tmpfile" -out "$backup_filename" -iter 16384 -k "$PCA_BACKUP_KEY" -pbkdf2 >/dev/null 2>&1 && \
	echolog "$OK" "Backup $backup_filename successful" || echolog "$FAILED" "Backup $backup_filename failed"
	
	rtval=$?
	
	rm -f "$backup_tmpfile" >/dev/null 2>&1 
	rmdir "$backup_tmpname" >/dev/null 2>&1
	
	echo -n "[0;1;34;94mDeleting backups older than $PCA_BACKUP_ROTATE_DAYS days...[0m"
	find $PCA_BACKUP_PATH -type f -name "pca_*.bak" -mtime +$PCA_BACKUP_ROTATE_DAYS -exec rm {} \;
	echo $OK
	
	echo -en "\nThe MD5    checksum of $backup_filename is: "
	cat $backup_filename | $PCA_OPENSSL md5 | $PCA_AWK '{print $2}'
	echo -en "The SHA1   checksum of $backup_filename is: "
	cat $backup_filename | $PCA_OPENSSL sha1 | $PCA_AWK '{print $2}'
	echo -en "The SHA256 checksum of $backup_filename is: "
	cat $backup_filename | $PCA_OPENSSL sha256 | $PCA_AWK '{print $2}'

	exit $rtval
fi

# END OPMODE: BACKUP
##########################

##########################
# OPMODE: RESTORE

if [ "$PCA_OPMODE" = "restore" ]; then
	[ "$PCA_FILENAME" = "" ] && error 4 "A backup filename has to be set."
	[ -f "$PCA_FILENAME" ] || error 6 "Backup file not found."

	echo -en "The MD5    checksum of $PCA_FILENAME is: "
	cat $PCA_FILENAME | $PCA_OPENSSL md5 | $PCA_AWK '{print $2}'
	echo -en "The SHA1   checksum of $PCA_FILENAME is: "
	cat $PCA_FILENAME | $PCA_OPENSSL sha1 | $PCA_AWK '{print $2}'
	echo -en "The SHA256 checksum of $PCA_FILENAME is: "
	cat $PCA_FILENAME | $PCA_OPENSSL sha256 | $PCA_AWK '{print $2}'
	echo ""

	[ "$PCA_FORCE" = "" ] && error 7 "Restoring (overwriting the existing CA) is imposible, unless --force is set."
	
	echo -n "[0;1;34;94mRestoring certificate authority...[0m"
	
	tmp=`$PCA_MKTEMP -d -q --suffix .pca`
	[ "$tmp" = "" ] && error 5 "Unable to create tmp directory"

	restore_tmpname=`echo "${0}_$(date +'%s')" | $PCA_OPENSSL sha1 | $PCA_AWK '{print $2}'`
	restore_tmpfile="$tmp/pca_${restore_tmpname}.tar"
	
	$PCA_OPENSSL aes-256-cbc -d -a -in "$PCA_FILENAME" -out "$restore_tmpfile" -iter 16384 -k "$PCA_BACKUP_KEY" -pbkdf2 >/dev/null 2>&1 && \
	$PCA_TAR -C "$PCA_BASE_PATH" -xf "$restore_tmpfile" . >/dev/null 2>&1 && \
	echolog "$OK" "Restoration of $PCA_FILENAME done" || echolog "$FAILED" "Restoration of $PCA_FILENAME failed"
	
	rtval=$?
	
	rm -f "$restore_tmpfile" >/dev/null 2>&1 
	rmdir "$restore_tmpname" >/dev/null 2>&1
	
	exit $rtval
fi

# END OPMODE: RESTORE
##########################

#############################
# OPMODE: SHOW-PGP-KEYBOX

if [ "$PCA_OPMODE" = "show-pgp-keybox" ]; then
	export GNUPGHOME="$PCA_GNUPG_BASE_PATH/$PCA_SELECTED_STORE"
	$PCA_GNUPG --homedir "$PCA_GNUPG_BASE_PATH/$PCA_SELECTED_STORE" -K
fi

# END OPMODE: SHOW-PGP-KEYBOX
#############################

##############################
# OPMODE: SHOW-PGP-KEYLIST

if [ "$PCA_OPMODE" = "show-pgp-keylist" ]; then
	export GNUPGHOME="$PCA_GNUPG_BASE_PATH/$PCA_SELECTED_STORE"
	$PCA_GNUPG --homedir "$PCA_GNUPG_BASE_PATH/$PCA_SELECTED_STORE" --list-options show-only-fpr-mbox --list-secret-keys
fi

# END OPMODE: SHOW-PGP-KEYLIST
##############################

##########################
# OPMODE: ---

if [ "$PCA_OPMODE" = "" -a "$PCA_CMD" != "" ]; then
	error 254 "Invalid operation mode specified. See '$0 --help' for details"
fi

# END OPMODE: ---
##########################
